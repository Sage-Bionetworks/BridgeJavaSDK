{
  "swagger": "2.0",
  "info": {
    "version": "20161028",
    "title": "Bridge Server API"
  },
  "host": "webservices.sagebridge.org",
  "basePath": "/",
  "securityDefinitions": {
    "BridgeSecurity": {
      "type": "apiKey",
      "in": "header",
      "name": "Bridge-Session"
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "parameters": {
    "cacheKey": {
      "name": "cacheKey",
      "description": "Cache key",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "schemaId": {
      "name": "schemaId",
      "description": "Upload schema ID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "taskId": {
      "name": "taskId",
      "description": "Task ID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "revision": {
      "name": "revision",
      "description": "Revision number",
      "required": true,
      "in": "path",
      "type": "integer",
      "format": "int64"
    },
    "schedulePlanGuid": {
      "name": "schedulePlanGuid",
      "description": "Schedule plan GUID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "subpopulationGuid": {
      "name": "subpopulationGuid",
      "description": "Subpopulation GUID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "studyId": {
      "name": "studyId",
      "description": "Study ID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "uploadId": {
      "name": "uploadId",
      "description": "Upload ID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "userId": {
      "name": "userId",
      "description": "User ID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "surveyGuid": {
      "name": "surveyGuid",
      "description": "Survey GUID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "createdOn": {
      "name": "createdOn",
      "description": "Created on timestamp (ISO 8601)",
      "required": true,
      "in": "path",
      "type": "string",
      "format": "date-time"
    },
    "newSchemaRev": {
      "name": "newSchemaRev",
      "description": "Should a new schema revision be created?",
      "required": false,
      "in": "query",
      "type": "boolean"
    },
    "identifier": {
      "name": "identifier",
      "description": "identifier",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "startDate": {
      "name": "startDate",
      "in": "query",
      "description": "The first day to include in reports that are returned",
      "type": "string",
      "format": "date",
      "required": true
    },
    "endDate": {
      "name": "endDate",
      "in": "query",
      "description": "The last day to include in reports that are returned",
      "type": "string",
      "format": "date",
      "required": true
    },
    "startDateOpt": {
      "name": "startDate",
      "in": "query",
      "description": "The first day to include in reports that are returned",
      "type": "string",
      "format": "date-time",
      "required": false
    },
    "endDateOpt": {
      "name": "endDate",
      "in": "query",
      "description": "The last day to include in reports that are returned",
      "type": "string",
      "format": "date-time",
      "required": false
    },
    "startTime": {
      "name": "startTime",
      "in": "query",
      "type": "string",
      "format": "date-time",
      "required": true
    },
    "endTime": {
      "name": "endTime",
      "in": "query",
      "type": "string",
      "format": "date-time",
      "required": true
    },
    "pageSize": {
      "name": "pageSize",
      "description": "maximum number of records in each returned page",
      "in": "query",
      "type": "integer",
      "format": "int64",
      "required": false,
      "default": 50,
      "maximum": 100
    },
    "offsetBy": {
      "name": "offsetBy",
      "description": "next page start offset for pagination",
      "in": "query",
      "type": "number",
      "required": false
    },
    "offsetKey": {
      "name": "offsetKey",
      "description": "next page start key for pagination",
      "in": "query",
      "type": "string",
      "required": false
    },
    "guid": {
      "name": "guid",
      "description": "A guid",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "activityGuid": {
      "name": "activityGuid",
      "description": "Activity GUID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "scheduledOnStart": {
      "name": "scheduledOnStart",
      "in": "query",
      "description": "Activities returned are at or after the timestamp. If scheduledOnStart is \nprovided, scheduledOnEnd must be provided, and vice versa. Default range is \n4 days in the future to 10 days in the past.\n",
      "type": "string",
      "format": "date-time",
      "required": false
    },
    "scheduledOnEnd": {
      "name": "scheduledOnEnd",
      "in": "query",
      "description": "Activities returned are at or before the timestamp. If scheduledOnEnd is \nprovided, scheduledOnStart must be provided, and vice versa. Default range is \n4 days in the future to 10 days in the past.\n",
      "type": "string",
      "format": "date-time",
      "required": false
    }
  },
  "paths": {
    "/v3/auth/signIn": {
      "post": {
        "operationId": "signIn",
        "tags": [
          "Authentication"
        ],
        "description": "Send user credentials to authenticate with the Bridge server. Whether the server returns \n200 (user successfully authenticated) or 412 (user has authenticated but has not yet \nconsented to participate in research), the response will contain a user session. \n\nThe session contains the \"sessionToken\" property with the token that must be used to interact \nwith other endpoints of the service. That value should be sent via the request header \n\"Bridge-Session\" to any endpoint requiring authentication. The Bridge session token is \ncurrently valid for 12 hours. However, your client application should be prepared to \nre-authenticate on any call if it returns 401 (\"Not authenticated\"), as the session may \nexpire before this period for unforeseen reasons, like a server failure.\n\nIf the user has not yet consented, the session also contains detailed information about the \nconsent (or consents) the user must submit a signature for, before they will be allowed to \nmake further calls to Bridge. You can also implement logic to re-consent to updated consents, \nif desired.\n\nNote that a 412 response will not be sent for any account that has an administrative role.\n",
        "parameters": [
          {
            "name": "SignIn",
            "in": "body",
            "description": "Sign in information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignIn"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserSessionInfo"
            }
          },
          "404": {
            "description": "Credentials incorrect or the user does not exist",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "423": {
            "description": "Account has been disabled",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "/v3/auth/signOut": {
      "post": {
        "operationId": "signOut",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Delete the user's session on the server.\n",
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/auth/requestResetPassword": {
      "post": {
        "operationId": "requestResetPassword",
        "tags": [
          "Authentication"
        ],
        "description": "Does not require authentication. Will send an email with a link that contains the session \ntoken necessary to reset the password (cannot be done through the API alone). If the user \naccount does not exist, this method will still return 200 in order to prevent \"account \nenumeration\" security breaches.\n",
        "parameters": [
          {
            "name": "Email",
            "in": "body",
            "description": "Email information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          }
        }
      }
    },
    "/v3/auth/resetPassword": {
      "post": {
        "operationId": "resetPassword",
        "tags": [
          "Authentication"
        ],
        "description": "This API will not normally be called directly by a client. A user will receive an email \ntriggered by the /requestResetPassword call, with an URL to open up a password reset page \non the Bridge server. That page submits the new password along with a one-time session \ntoken (\"sptoken\") to this endpoint, in order to change the password. The template for the \nemail that is sent can be configured as part of a Study through the management APIs. If \nthe token is not provided or is expired, this request will fail. If the user account does not \nexist, this method will still return 200 in order to prevent \"account enumeration\" security \nbreaches.\n",
        "parameters": [
          {
            "name": "PasswordReset",
            "in": "body",
            "description": "Password reset token",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordReset"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },
    "/v3/auth/signUp": {
      "post": {
        "operationId": "signUp",
        "tags": [
          "Authentication"
        ],
        "description": "Depending on the configuration of the study, the user will normally be sent an email with a link \nto verify his or her email address before the account will be activated. If the user account \ndoes not exist, this method will still return 200 in order to prevent \"account enumeration\" \nsecurity breaches.\n\nOnly basic credentials are necessary to sign up (email, password and study), but all the \ninformation that can be provided for a participant's account can be submitted as part of sign up.\n",
        "parameters": [
          {
            "name": "SignUp",
            "in": "body",
            "description": "Sign up information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignUp"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          }
        }
      }
    },
    "/v3/auth/verifyEmail": {
      "post": {
        "operationId": "verifyEmail",
        "tags": [
          "Authentication"
        ],
        "description": "This API will not normally be called directly by a client. A user will receive an email \ntriggered by the /signUp call, with an URL to open up a page that verifies the email was \nreceived at the provided email address. This page is on the Bridge server. That page submits \na one-time session token (\"sptoken\") to this endpoint, in order to change the password. The \ntemplate for this verification email can be configured as part of a Study through the management \nAPIs.\n",
        "parameters": [
          {
            "name": "EmailVerification",
            "in": "body",
            "description": "Email verification token",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailVerification"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          }
        }
      }
    },
    "/v3/auth/resendEmailVerification": {
      "post": {
        "operationId": "resendEmailVerification",
        "tags": [
          "Authentication"
        ],
        "description": "Resend an email to the provided email address asking the address holder to verify their \naddress. Whether the email address has been registered or not through sign up, this method\nwill return 200 in order to prevent \"account enumeration\" security breaches.\n",
        "parameters": [
          {
            "name": "EmailVerification",
            "in": "body",
            "description": "Email address of participant",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          }
        }
      }
    },
    "/v3/activities": {
      "get": {
        "operationId": "getScheduledActivities",
        "summary": "Get a list of the participant's scheduled activities",
        "tags": [
          "Activities",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Gets all available, started, or scheduled activities for a user. Once an activity is \nfinished, or expires (the time has passed for it to be started), it will be removed \nfrom the list of activities returned to the user.\n",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The user's time zone offset (e.g. +07:00). Scheduled activities will be \nreturned in the timezone submitted at the time of the request. \n",
            "required": true,
            "type": "string"
          },
          {
            "name": "daysAhead",
            "in": "query",
            "required": true,
            "description": "Retrieve activities that are scheduled in the future for the indicated number \nof days past today.\n",
            "type": "integer",
            "minimum": 0,
            "maximum": 5
          },
          {
            "name": "minimumPerSchedule",
            "in": "query",
            "description": "Force a look-ahead on repeating activities until at least the indicated number \nof activities are scheduled (this is applied to the each schedule in the system \nthat applies to this user). The system will then return either the activities \nfor N days, or the minimum number of activities, whichever is the greatest in \nnumber. This setting can help to expose infrequent tasks (weekly, monthly, \netc.) to users.\n",
            "type": "integer",
            "minimum": 0,
            "maximum": 5
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScheduledActivityList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      },
      "post": {
        "operationId": "updateScheduledActivities",
        "summary": "Update the status of one or more scheduled activities.",
        "tags": [
          "Activities",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Submit one or more scheduled activities with updated startedOn or finishedOn timestamps. The \nonly values needed in the JSON for each activity are the guid, startedOn and finishedOn fields.\n",
        "parameters": [
          {
            "name": "ScheduledActivity",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScheduledActivity"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/activities/{activityGuid}": {
      "get": {
        "operationId": "getActivityHistory",
        "summary": "Get a history of activities",
        "tags": [
          "Activities",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/activityGuid"
          },
          {
            "$ref": "#/parameters/scheduledOnStart"
          },
          {
            "$ref": "#/parameters/scheduledOnEnd"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "name": "offsetBy",
            "description": "next page start offset for pagination",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForwardCursorScheduledActivityList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/compoundactivitydefinitions": {
      "get": {
        "operationId": "getAllCompoundActivityDefinitions",
        "summary": "List all compound activity definitions in the study",
        "tags": [
          "Compound Activity Definitions",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CompoundActivityDefinitionList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "createCompoundActivityDefinition",
        "summary": "Create a compound activity definition",
        "tags": [
          "Compound Activity Definitions",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "CompoundActivityDefinition",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompoundActivityDefinition"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CompoundActivityDefinition"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/compoundactivitydefinitions/{taskId}": {
      "get": {
        "operationId": "getCompoundActivityDefinition",
        "summary": "Get a compound activity definition by ID",
        "tags": [
          "Compound Activity Definitions",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/taskId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CompoundActivityDefinition"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      },
      "delete": {
        "operationId": "deleteCompoundActivityDefinition",
        "summary": "Delete a compound activity definition",
        "tags": [
          "Compound Activity Definitions",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/taskId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      },
      "post": {
        "operationId": "updateCompoundActivityDefinition",
        "summary": "Update a compound activity definition",
        "tags": [
          "Compound Activity Definitions",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/taskId"
          },
          {
            "name": "CompoundActivityDefinition",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompoundActivityDefinition"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CompoundActivityDefinition"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/participants": {
      "get": {
        "operationId": "getParticipants",
        "summary": "Get a paged list of study participants (users)",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "offsetBy",
            "type": "integer",
            "description": "defaults to 0",
            "required": false,
            "in": "query"
          },
          {
            "name": "pageSize",
            "type": "integer",
            "description": "defaults to 50",
            "minimum": 5,
            "maximum": 100,
            "required": false,
            "in": "query"
          },
          {
            "name": "emailFilter",
            "type": "string",
            "required": false,
            "in": "query"
          },
          {
            "$ref": "#/parameters/startDateOpt"
          },
          {
            "$ref": "#/parameters/endDateOpt"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountSummaryList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      },
      "post": {
        "operationId": "createParticipant",
        "summary": "Create a new study participant (user)",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "SignUp",
            "in": "body",
            "description": "Sign up",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignUp"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/IdentifierHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/self": {
      "get": {
        "operationId": "getUsersParticipantRecord",
        "summary": "Get user's participant record",
        "description": "Get the current user's participant record. Any authenticated user may call this endpoint.  \n**The user does not need to have consented to the study in order to access their participant \nrecord.** \n",
        "tags": [
          "Participants",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      },
      "post": {
        "operationId": "updateUsersParticipantRecord",
        "summary": "Update user's participant record",
        "description": "Update the current user's participant record. **Unlike most other calls in this API, you can send \npartically complete JSON to this endpoint,** and it will selectively update the participant's record \n(rather than treating missing properties as an instruction to delete those fields in the record). \nThis means that many existing APIs that sent a single update value, can direct those payloads to \nthis endpoint and they will still work fine. For this reason most `/v3/users/*` endpoints are \nnow deprecated, though there is no plan to remove them. Any authenticated user may call this \nendpoint. **The user does not need to have consented to the study in order to update their participant \nrecord.** \n",
        "tags": [
          "Participants",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "StudyParticipant",
            "in": "body",
            "description": "Study participant",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserSessionInfo"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/participants/{userId}": {
      "get": {
        "operationId": "getParticipant",
        "summary": "Get a study participant (user) record",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      },
      "post": {
        "operationId": "updateParticipant",
        "summary": "Update an existing study participant (user) record",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "name": "StudyParticipant",
            "in": "body",
            "description": "Study participant",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/uploads": {
      "get": {
        "operationId": "getParticipantUploads",
        "summary": "Get a study participant's upload history",
        "description": "Retrieve information about the uploads from a user. This is particularly useful during \ndevelopment to verify the mobile application is sending valid data back to the Bridge \nserver. The API can retrieve up to 2 days worth of upload records, defined by the \nstartTime and endTime timestamps (ISO 8601 format). startTime/endTime are optional and \nwill default to the last 24 hours of uploads. if the endTime is not provided, it will \nbe one day after the startTime. If the startTime is not provided, it will be one day \nbefore the endTime.\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "name": "startTime",
            "in": "query",
            "type": "string",
            "format": "date-time",
            "description": "Defaults to one day ago (24 hours)"
          },
          {
            "name": "endTime",
            "in": "query",
            "type": "string",
            "format": "date-time",
            "description": "Defaults to time stamp for time of request (\"now\")"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/notifications": {
      "get": {
        "operationId": "getParticipantPushNotificationRegistrations",
        "summary": "Get a study participant's push notification registrations",
        "description": "Get all of a study participant's registrations for push notifications. There can be more than one \nof these if the participant has downloaded and installed the app on more than one device. There must \nbe at least one record in order to send a push notification to the user.\n",
        "tags": [
          "Participants",
          "Notifications",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationRegistrationList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/sendNotification": {
      "post": {
        "operationId": "sendNotificationToParticipant",
        "summary": "Send a push notification to a single participant",
        "description": "Send a push notification to an individual participant (assuming they have registered for push notifications). \nDo not use this method to notify a group of participants; create a topic, ask your users to subscribe to that \ntopic, and send a message via that topic instead.\n",
        "tags": [
          "Participants",
          "Notifications",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NotificationMessage"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/202_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/requestInfo": {
      "get": {
        "operationId": "getParticipantRequestInfo",
        "summary": "Get information about the last request made by this participant",
        "description": "Retrieves information about the user agent headers and participant settings that were in \neffect the last time this participant contacted the Bridge server. Also provides the last \ntime activities were retrieved and uploads were sent back to the server.\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RequestInfo"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/activities": {
      "get": {
        "operationId": "getParticipantActivities",
        "deprecated": true,
        "summary": "Get paged history of activities scheduled for a participant",
        "description": "Provides a view of all the activities that have been created for a participant. The state of these activities is \nreturned without modification. No filtering is performed on the list of activities, which may have been assigned \ndue to different or changing filtering criteria. These records help to determine if a participant is currently active \nin the study (e.g. if there are no activities, the user has never asked for them them). Records are sorted first \nby the type of activity, and then by the date the activity was scheduled to start on.\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "name": "offsetKey",
            "in": "query",
            "type": "string",
            "description": "The identifier to use as the first record of the returned page of activities"
          },
          {
            "name": "pageSize",
            "in": "query",
            "type": "integer",
            "description": "The number of records to return in the query (defaults to 10)."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ActivityList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      },
      "delete": {
        "operationId": "deleteParticipantActivities",
        "summary": "Delete all activities for a participant",
        "description": "Intended for use in development. Developers may wish to delete an account's scheduled activities in order \nto see the impact of changes to schedules for a study. Otherwise, activities from the original \nscheduling will persist until they expire, alongside tasks issued for the newly changed schedule. **This \nshould not be called on production accounts.**\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/activities/{activityGuid}": {
      "get": {
        "operationId": "getParticipantActivityHistory",
        "summary": "Get a study participant's history of activities",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/activityGuid"
          },
          {
            "$ref": "#/parameters/scheduledOnStart"
          },
          {
            "$ref": "#/parameters/scheduledOnEnd"
          },
          {
            "$ref": "#/parameters/offsetBy"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForwardCursorScheduledActivityList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/signOut": {
      "post": {
        "operationId": "signOutParticipant",
        "summary": "Sign the user out and delete their server session",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/requestResetPassword": {
      "post": {
        "operationId": "sendParticipantResetPasswordEmail",
        "summary": "Trigger a request to reset password for this user",
        "description": "When called, a reset password email will be set to the email address for this account.\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/resendEmailVerification": {
      "post": {
        "operationId": "sendParticipantEmailVerification",
        "summary": "Resend an email verification email to this user",
        "description": "When called, resends the email to the user's email account, which contains a link they must \nclick on to verify they control that email address. Account is not activated until this is \ndone.\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/consents/withdraw": {
      "post": {
        "operationId": "withdrawParticipantFromStudy",
        "summary": "Withdraw the participant from the study entirely",
        "description": "This endpoint will withdraw the user from any and all signed consents in the study, and \nset their sharing status to \"no_sharing\". The user is withdrawn from all subpopulations \nin the study whether they currently apply to the user or not. Unless you have more \ncomplicated consent requirements (like an optional consent that can be signed or not), \nthis is the best approach to withdrawing a user from a study.\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "name": "withdrawal",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Withdrawal"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/consents/{subpopulationGuid}/resendConsent": {
      "post": {
        "operationId": "resendParticipantConsentAgreement",
        "summary": "Re-send the consent agreement for this subpopulation",
        "description": "When called, re-sends a signed consent agreement document to the participant's email address.\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/reports/{identifier}": {
      "get": {
        "operationId": "getUsersParticipantReportRecords",
        "summary": "Get participant report records",
        "tags": [
          "Reports",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "$ref": "#/parameters/startDate"
          },
          {
            "$ref": "#/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportDataList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      },
      "post": {
        "operationId": "addParticipantReportRecord",
        "summary": "Add a participant report record",
        "tags": [
          "Reports",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "name": "ReportData",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReportData"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteAllParticipantReportRecords",
        "summary": "Delete a participant report (all records)",
        "tags": [
          "Reports",
          "_For Developers",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/identifier"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      }
    },
    "/v3/participants/{userId}/reports/{identifier}/{date}": {
      "delete": {
        "operationId": "deleteParticipantReportRecord",
        "summary": "Delete a record for a specific day of a participant report",
        "tags": [
          "Reports",
          "_For Developers",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "name": "date",
            "description": "Date of records",
            "required": true,
            "in": "path",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      }
    },
    "/v3/participants/reports/{identifier}": {
      "post": {
        "operationId": "addParticipantReportRecordForWorker",
        "summary": "Add a participant report record",
        "description": "Endpoint for a worker to add a report record for a participant. Unlike other endpoints, \nthe worker must provide the healthCode of the target user (this endpoint allows external \nprocesses working with data from Synapse to write reports back to Bridge). \n",
        "tags": [
          "Reports",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "name": "report data",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReportDataForWorker"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      },
      "delete": {
        "operationId": "deleteParticipantReportIndex",
        "summary": "Delete a participant report index",
        "description": "Delete a participant report index. These indices can be shared between users so they \nare not normally deleted, but this endpoint allows the index identifiers to be deleted \nduring testing.\n",
        "tags": [
          "Reports",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/subpopulations": {
      "get": {
        "operationId": "getSubpopulations",
        "summary": "Get all subpopulations in this study",
        "tags": [
          "Subpopulations",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubpopulationList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "createSubpopulation",
        "summary": "Create a new subpopulation",
        "tags": [
          "Subpopulations",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "Subpopulation",
            "in": "body",
            "description": "New subpopulation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subpopulation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GuidVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}": {
      "get": {
        "operationId": "getSubpopulation",
        "summary": "Get a subpopulation",
        "tags": [
          "Subpopulations",
          "_For Developers",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Subpopulation"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher"
          }
        }
      },
      "post": {
        "operationId": "updateSubpopulation",
        "summary": "Update an existing subpopulation",
        "tags": [
          "Subpopulations",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "name": "Subpopulation",
            "description": "A subpopulation",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Subpopulation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteSubpopulation",
        "summary": "Delete a subpopulation",
        "description": "Delete a subpopulation unless it is a default subpopulation, which cannot be deleted. \nIf this is a \n",
        "tags": [
          "Subpopulations",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "in": "query",
            "name": "physical",
            "type": "boolean",
            "required": false,
            "default": false,
            "description": "If an admin sets this query value to true, the subpopulation will be permanently\ndeleted from the database (used for testing).\n"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin_developer"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/signature": {
      "get": {
        "operationId": "getConsentSignature",
        "summary": "Get the participant's consent signature for the subpopulation",
        "description": "",
        "tags": [
          "Consents",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ConsentSignature"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      },
      "post": {
        "operationId": "createConsentSignature",
        "summary": "Consent to this subpopulation by submitting a signature",
        "description": "Agree to the terms of participant represented by this subpopulation, by submitting a \nsignature to the Bridge server.\n",
        "tags": [
          "Consents",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "name": "body",
            "description": "A consent signature",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConsentSignature"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/signature/withdraw": {
      "post": {
        "operationId": "withdrawConsentFromSubpopulation",
        "summary": "Withdraw participant from this subpopulation consent group",
        "description": "This withdraws the user from only one subpopulation.\n",
        "tags": [
          "Consents",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "name": "withdrawal",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Withdrawal"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/signature/email": {
      "post": {
        "operationId": "emailConsentAgreement",
        "summary": "Email the consent agreement to the participant's email address",
        "tags": [
          "Consents",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/consents": {
      "get": {
        "operationId": "getAllDefaultConsentRevisions",
        "summary": "Get all revisions of the consent in a study's default subpopulation",
        "deprecated": true,
        "tags": [
          "Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsentList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "addNewDefaultConsentRevision",
        "summary": "Add new consent revision to the study's default subpopulation",
        "deprecated": true,
        "tags": [
          "Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/consents/recent": {
      "get": {
        "operationId": "getMostRecentDefaultConsentRevision",
        "summary": "Get most recent revision of a study's default subpopulation",
        "deprecated": true,
        "tags": [
          "Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/consents/published": {
      "get": {
        "operationId": "getPublishedDefaultConsentRevision",
        "summary": "Get most recently published revision of a study's default subpopulation",
        "deprecated": true,
        "tags": [
          "Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/consents/{createdOn}": {
      "get": {
        "operationId": "getDefaultConsentRevision",
        "summary": "Get specific revision of a study's default subpopulation",
        "deprecated": true,
        "tags": [
          "Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/createdOn"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/consents/withdraw": {
      "post": {
        "operationId": "withdrawAllConsents",
        "summary": "Withdraw all consents to research for this user, whether currently applicable or not",
        "tags": [
          "Consents",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "withdrawal",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Withdrawal"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents": {
      "get": {
        "operationId": "getAllConsents",
        "summary": "Get a list of all consents for this subpopulation",
        "tags": [
          "Study Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsentList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "createConsent",
        "summary": "Add a new study consent version to this subpopulation",
        "tags": [
          "Study Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "name": "Study consent",
            "description": "Study consent",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/recent": {
      "get": {
        "operationId": "getMostRecentConsent",
        "summary": "Get the most recently created consent revision",
        "description": "Get the most recently created revision of this subpopulation consent. This is not \nnecessarily the published version of the consent.\n",
        "tags": [
          "Study Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/published": {
      "get": {
        "operationId": "getPublishedConsent",
        "summary": "Get the published consent revision",
        "description": "Get the published revision of this subpopulation consent. This is not necessarily the \nmost recent version of the consent.\n",
        "tags": [
          "Study Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/{createdOn}": {
      "get": {
        "operationId": "getConsent",
        "summary": "Get a specific consent revision",
        "description": "Get a specific revision of this subpopulation consent by its creation timestamp.\n",
        "tags": [
          "Study Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "name": "createdOn",
            "description": "creation timestamp of the revision",
            "type": "string",
            "format": "date-time",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/{createdOn}/publish": {
      "post": {
        "operationId": "publishConsent",
        "summary": "Publish a specific consent revision",
        "description": "Publish a specific revision of this subpopulation consent by its creation timestamp. This version of \nthe consent will be presented to users in order to participate in this subpopulation. If users have \nsigned any other revision of this consent, the `signedMostRecentConsent` flag in the consent status \nrecord for this consent (in the user's session) will be false. However, the user is still considered to \nbe consented and will not be shut out of performing operations with a 412 response.\n",
        "tags": [
          "Study Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "name": "createdOn",
            "description": "creation timestamp of the revision",
            "type": "string",
            "format": "date-time",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/users": {
      "post": {
        "operationId": "createUser",
        "summary": "Create a new user",
        "tags": [
          "Users",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "SignUp",
            "in": "body",
            "description": "New user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignUp"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/UserSessionInfo"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/users/{userId}": {
      "delete": {
        "operationId": "deleteUser",
        "summary": "Delete a user",
        "description": "This is a heavyweight operation; it is better to disable a user account when possible. \nThis endpoint exists mostly for tests and cases where governance dictates the deletion \nof as much user data as possible. \n",
        "tags": [
          "Users",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/users/self/emailData": {
      "post": {
        "operationId": "emailDataToUser",
        "summary": "Make user's data available for download",
        "description": "Asynchronously request the uploaded data for this user, in a given time range (inclusive). \nBridge server will gather the user's data for the given time zone and email a secure link \nto the user's registered email address. \n",
        "tags": [
          "Users",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/startDate"
          },
          {
            "$ref": "#/parameters/endDate"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/202_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/users/self/reports/{identifier}": {
      "get": {
        "operationId": "getParticipantReportRecords",
        "summary": "Get a participant report",
        "description": "Get the records for a specific participant report. Participants can get reports for their own \naccount. Note that this call does not require consent, but does require authentication. \n",
        "tags": [
          "Users",
          "Reports",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "$ref": "#/parameters/startDate"
          },
          {
            "$ref": "#/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "Report records for the participant",
            "schema": {
              "$ref": "#/definitions/ReportDataList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/reports": {
      "get": {
        "operationId": "getReportIndices",
        "summary": "Get list of report indices for studies or participants",
        "tags": [
          "Reports",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type (either study or participant)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportIndexList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/reports/{identifier}": {
      "get": {
        "operationId": "getStudyReportRecords",
        "summary": "Get study report records",
        "tags": [
          "Reports",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "$ref": "#/parameters/startDate"
          },
          {
            "$ref": "#/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportDataList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      },
      "post": {
        "operationId": "addStudyReportRecord",
        "summary": "Add a record to a study report",
        "tags": [
          "Reports",
          "_For Developers",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "name": "body",
            "description": "Report data",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReportData"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      },
      "delete": {
        "operationId": "deleteAllStudyReportRecords",
        "summary": "Delete a study report (all records)",
        "tags": [
          "Reports",
          "_For Developers",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      }
    },
    "/v3/reports/{identifier}/index": {
      "get": {
        "operationId": "getStudyReportIndex",
        "summary": "Get a study report index",
        "description": "Get the index (or metadata) for a set of report records. \n",
        "tags": [
          "Reports",
          "_For Developers",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportIndex"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher"
          }
        }
      },
      "post": {
        "operationId": "updateStudyReportIndex",
        "summary": "Update an existing study report index",
        "description": "Update the index (or metadata) for a set of report records.\n",
        "tags": [
          "Reports",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "name": "ReportIndex",
            "in": "body",
            "description": "Report index",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReportIndex"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/reports/{identifier}/{date}": {
      "delete": {
        "operationId": "deleteStudyReportRecord",
        "summary": "Delete a record for a specific day of a study report",
        "tags": [
          "Reports",
          "_For Developers",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "name": "date",
            "description": "Date of records",
            "required": true,
            "in": "path",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      }
    },
    "/v3/surveys": {
      "get": {
        "operationId": "getMostRecentSurveys",
        "summary": "Get most recent version of each survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SurveyList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "createSurvey",
        "summary": "Create a new survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "survey",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Survey"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GuidCreatedOnVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/surveys/recent": {
      "$ref": "#/paths/~1v3~1surveys"
    },
    "/v3/surveys/published": {
      "get": {
        "operationId": "getPublishedSurveys",
        "summary": "Get the most recently published version of each survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SurveyList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/surveys/{surveyGuid}/revisions": {
      "get": {
        "operationId": "getAllVersionsOfSurvey",
        "summary": "Get all revisions of a survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SurveyList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/surveys/{surveyGuid}/revisions/recent": {
      "get": {
        "operationId": "getMostRecentSurveyVersion",
        "summary": "Get most recent revision of a survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Survey"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/surveys/{surveyGuid}/revisions/published": {
      "get": {
        "operationId": "getPublishedSurveyVersion",
        "summary": "Get most recently published revision of a survey",
        "tags": [
          "Surveys",
          "_For Developers",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Survey"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/surveys/{surveyGuid}/revisions/{createdOn}": {
      "get": {
        "operationId": "getSurvey",
        "summary": "Get a survey revision",
        "tags": [
          "Surveys",
          "_For Consented Users",
          "_For Workers",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          },
          {
            "$ref": "#/parameters/createdOn"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Survey"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      },
      "post": {
        "operationId": "updateSurvey",
        "summary": "Update a non-published survey revision",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          },
          {
            "$ref": "#/parameters/createdOn"
          },
          {
            "name": "Survey",
            "in": "body",
            "description": "Updated survey",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Survey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidCreatedOnVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteSurvey",
        "summary": "Delete a survey version",
        "tags": [
          "Surveys",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          },
          {
            "$ref": "#/parameters/createdOn"
          },
          {
            "name": "physical",
            "description": "Physically delete the survey (admins only)",
            "default": false,
            "required": false,
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin_developer"
          }
        }
      }
    },
    "/v3/surveys/{surveyGuid}/revisions/{createdOn}/version": {
      "post": {
        "operationId": "versionSurvey",
        "summary": "Version a survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          },
          {
            "$ref": "#/parameters/createdOn"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GuidCreatedOnVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/surveys/{surveyGuid}/revisions/{createdOn}/publish": {
      "post": {
        "operationId": "publishSurvey",
        "summary": "Publish a survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          },
          {
            "$ref": "#/parameters/createdOn"
          },
          {
            "$ref": "#/parameters/newSchemaRev"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidCreatedOnVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/notifications": {
      "get": {
        "operationId": "getNotificationRegistrations",
        "summary": "Get all of a user's notification registrations",
        "description": "Return all the registrations for this user. There may be more than one if the user installs \nthe application on different devices. Bridge attempts to prevent multiple registrations on the\nsave device.\n",
        "tags": [
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationRegistrationList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      },
      "post": {
        "operationId": "createNotificationRegistration",
        "summary": "Register a client to receive push notifications",
        "description": "Create a new registration. The client will retrieve an identifying token (the exact format and \nname for the token varies by platform), and register it with Bridge. Bridge will return a \nBridge-specific GUID to track this registration, which the client can use to update or delete \nthe registration at a later time. If the token already exists in an existing registration record, \nthen that registration record will be returned in lieu of creating a redundant record.\n",
        "tags": [
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NotificationRegistration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GuidHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "501": {
            "description": "This endpoint has not been implemented for this study. It has been disabled, or not completely configured. \nThe caller cannot fix the call to succeed, but it is not an unexpected server error, it is intentional.\n",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "/v3/notifications/{guid}": {
      "get": {
        "operationId": "getNotificationRegistration",
        "summary": "Get a push notification registration",
        "description": "Get a single push notification registration by its GUID. This request is scoped to the user.\n",
        "tags": [
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationRegistration"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      },
      "post": {
        "operationId": "updateNotificationRegistration",
        "summary": "Update a push notification registration",
        "description": "Update an existing device registration with a new token that has been assigned by the \nclient operating system. At least on iOS, the device token can change over the lifetime of \nthe app, and it is considered best practice to re-send this token to the server on every \nstart-up of the app. The guid returned from an update will always match the GUID that was \nsubmitted.\n",
        "tags": [
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NotificationRegistration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      },
      "delete": {
        "operationId": "deleteNotificationRegistration",
        "summary": "Delete a push notification registration",
        "description": "Delete a registration record. Bridge can no longer send push notifications to this device.\n",
        "tags": [
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/notifications/{guid}/subscriptions": {
      "get": {
        "operationId": "getTopicSubscriptions",
        "summary": "Get subscription status for all topics using a device registration",
        "description": "For every topic in the study, get a status object describing whether or not the caller is \nsubscribed to that topic.        \n",
        "tags": [
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubscriptionStatusList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      },
      "post": {
        "operationId": "subscribeToTopics",
        "summary": "Subscribe to a set of the topics using a device registration",
        "description": "Provide a registration GUID and a set of topic GUIDs. For every topic in the study, either subscribe \nor unsubscribe the registration GUID from the topic to bring the caller's subscription into line \nwith the set provided.\n",
        "tags": [
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SubscriptionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubscriptionStatusList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/topics": {
      "get": {
        "operationId": "getNotificationTopics",
        "summary": "Get all the notification topics in this study",
        "description": "Return all the topics defined for this study. Participants can be subscribed to topics if they \nregister for notifications. Researchers can then send push notifications to those users through \nthe user of a topic.\n",
        "tags": [
          "Notifications",
          "_For Developers",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationTopicList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher"
          }
        }
      },
      "post": {
        "operationId": "createNotificationTopic",
        "summary": "Create a notification topic",
        "description": "Create a notification topic. No participant is initially subscribed to a topic when it is \ncreated; users must be given the means to subscribe to a topic in the application. \n",
        "tags": [
          "Notifications",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NotificationTopic"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GuidHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/topics/{guid}": {
      "get": {
        "operationId": "getNotificationTopic",
        "summary": "Get a notification topic",
        "tags": [
          "Notifications",
          "_For Developers",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationTopic"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher"
          }
        }
      },
      "post": {
        "operationId": "updateNotificationTopic",
        "summary": "Update a notification topic",
        "tags": [
          "Notifications",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NotificationTopic"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteNotificationTopic",
        "summary": "Delete a notification topic",
        "tags": [
          "Notifications",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/topics/{guid}/sendNotification": {
      "post": {
        "operationId": "sendNotificationToTopic",
        "summary": "Send a push notification to all topic subscribers",
        "tags": [
          "Notifications",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NotificationMessage"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/202_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v4/schedules": {
      "get": {
        "operationId": "getSchedules",
        "summary": "Get schedules for user",
        "tags": [
          "Schedules",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScheduleList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/uploads": {
      "post": {
        "operationId": "requestUploadSession",
        "summary": "Request an upload session",
        "tags": [
          "Uploads",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "UploadRequest",
            "in": "body",
            "description": "An upload request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSession"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/uploads/{uploadId}/complete": {
      "post": {
        "operationId": "completeUploadSession",
        "summary": "Notify Bridge an upload is complete",
        "description": "Notify Bridge an upload is complete. Either a consented user or a worker \nprocess can access this endpoing, but failure to have the worker role will \nbe treated like a consent error. \n",
        "tags": [
          "Uploads",
          "_For Workers",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/uploadId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/uploadstatuses/{uploadId}": {
      "get": {
        "operationId": "getUploadStatus",
        "summary": "Get status of a single upload attempt",
        "description": "Caller must either be a participant getting a status of one of the participant's \nown uploads, or a reearcher.\n",
        "tags": [
          "Uploads",
          "_For Consented Users",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/uploadId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadValidationStatus"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/uploadschemas": {
      "get": {
        "operationId": "getMostRecentUploadSchemas",
        "summary": "Get most recent revision of all upload schemas",
        "tags": [
          "Upload Schemas",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSchemaList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "createOrUpdateUploadSchema",
        "summary": "Create or update an upload schema",
        "deprecated": true,
        "tags": [
          "Upload Schemas",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "UploadSchema",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v4/uploadschemas": {
      "post": {
        "operationId": "createUploadSchema",
        "summary": "Create an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "UploadSchema",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v4/uploadschemas/{schemaId}/revisions/{revision}": {
      "post": {
        "operationId": "updateUploadSchema",
        "summary": "Update an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schemaId"
          },
          {
            "$ref": "#/parameters/revision"
          },
          {
            "name": "UploadSchema",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/uploadschemas/{schemaId}": {
      "get": {
        "operationId": "getAllRevisionsOfUploadSchema",
        "summary": "Get all revisions of an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schemaId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSchemaList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/uploadschemas/{schemaId}/recent": {
      "get": {
        "operationId": "getMostRecentUploadSchema",
        "summary": "Get the most recent revision of an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schemaId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/uploadschemas/{schemaId}/revisions/{revision}": {
      "get": {
        "operationId": "getUploadSchema",
        "summary": "Get the specific revision of an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Developers",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schemaId"
          },
          {
            "$ref": "#/parameters/revision"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      }
    },
    "/v3/scheduleplans": {
      "get": {
        "operationId": "getSchedulePlans",
        "summary": "Get schedule plans",
        "tags": [
          "Schedules",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SchedulePlanList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "createSchedulePlan",
        "summary": "Create a schedule plan",
        "tags": [
          "Schedules",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SchedulePlan"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GuidVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/scheduleplans/{schedulePlanGuid}": {
      "get": {
        "operationId": "getSchedulePlan",
        "summary": "Get a schedule plan",
        "tags": [
          "Schedules",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schedulePlanGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SchedulePlan"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "updateSchedulePlan",
        "summary": "Update a schedule plan",
        "tags": [
          "Schedules",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schedulePlanGuid"
          },
          {
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SchedulePlan"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteSchedulePlan",
        "summary": "Get a schedule plan",
        "tags": [
          "Schedules",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schedulePlanGuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/studies": {
      "get": {
        "operationId": "getStudies",
        "summary": "Get all studies",
        "tags": [
          "Studies",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "summary",
            "required": false,
            "in": "query",
            "type": "boolean",
            "description": "If true, anyone can call this endpoint and return a list of truncated study objects\n(name and study identifier only). Otherwise, caller must be an admin.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyList"
            }
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      },
      "post": {
        "operationId": "createStudy",
        "summary": "Create a new study",
        "tags": [
          "Studies",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Study"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/VersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/studies/init": {
      "post": {
        "operationId": "createStudyAndUsers",
        "summary": "Create a new study with administrators and users",
        "description": "Create a new study along with the access team and project in Synapse to receive data collected through Bridge. \nAssigns the Synapse users in the admin ID list to be administrators of the access team and project, \nand creates the users in the user IDs (users will receive an email confirmation from Synapse to complete account creation).\n",
        "tags": [
          "Studies",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StudyAndUsers"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/VersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/studies/self": {
      "get": {
        "operationId": "getUsersStudy",
        "summary": "Get a study",
        "tags": [
          "Studies",
          "_For Developers",
          "_For Researchers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Study"
            }
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher_admin"
          }
        }
      },
      "post": {
        "operationId": "updateUsersStudy",
        "summary": "Update a study",
        "tags": [
          "Studies",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Study"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/studies/{studyId}": {
      "get": {
        "operationId": "getStudy",
        "summary": "Get a study",
        "tags": [
          "Studies",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/studyId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Study"
            }
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      },
      "post": {
        "operationId": "updateStudy",
        "summary": "Update a study",
        "tags": [
          "Studies",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/studyId"
          },
          {
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Study"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VersionHolder"
            }
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      },
      "delete": {
        "operationId": "deleteStudy",
        "summary": "Delete a study",
        "tags": [
          "Studies",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/studyId"
          },
          {
            "name": "physical",
            "description": "Physically delete the study",
            "default": false,
            "required": false,
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/studies/self/publicKey": {
      "get": {
        "operationId": "getStudyPublicCsmKey",
        "summary": "Get the public key CMS block for this study",
        "tags": [
          "Studies",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CmsPublicKey"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/studies/self/emailStatus": {
      "get": {
        "operationId": "getStudyEmailStatus",
        "summary": "SES email verification status",
        "description": "Consents will be emailed from the support email address you provide. Amazon \nSES will ask the holder of that address to confirm this is OK.\n",
        "tags": [
          "Studies",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmailVerificationStatus"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/studies/self/verifyEmail": {
      "post": {
        "operationId": "verifyStudyEmail",
        "summary": "Trigger SES email verification process",
        "description": "Amazon SES will attempt to verify that it can send email from your support email address. \nIf that fails or expires, this API will trigger another request to verify.\n",
        "tags": [
          "Studies",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmailVerificationStatus"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/studies/self/uploads": {
      "get": {
        "operationId": "getUploads",
        "summary": "Get uploads for the study",
        "tags": [
          "Studies",
          "Uploads",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/startTime"
          },
          {
            "$ref": "#/parameters/endTime"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/offsetKey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/studies/self/synapseProject": {
      "post": {
        "operationId": "createSynapseProjectTeam",
        "summary": "Create new Synapse project and team",
        "description": "Create a new Synapse project and team for the provided Synapse user, and grant permissions to \nthe Bridge exporter to export Bridge data into that study. This call also grants admin  \npermissions to the specified Synapse user for that project and team. You will need to create \na Synapse user first, and provide that user's ID to this endpoint call.\n",
        "tags": [
          "Studies",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "description": "A list of synapse user IDs to add as admins of the created project and access team",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/externalIds": {
      "get": {
        "operationId": "getExternalIds",
        "summary": "Get external IDs",
        "tags": [
          "External Identifiers",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "offsetKey",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "pageSize",
            "type": "integer",
            "in": "query",
            "required": true
          },
          {
            "name": "idFilter",
            "type": "string",
            "in": "query"
          },
          {
            "name": "assignmentFilter",
            "type": "boolean",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExternalIdentifierList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "addExternalIds",
        "summary": "Add external IDs to the study",
        "tags": [
          "External Identifiers",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteExternalIds",
        "summary": "Delete one or more external IDs",
        "tags": [
          "External Identifiers",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "externalId",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/studies/{studyId}/surveys/published": {
      "get": {
        "operationId": "getAllPublishedSurveysInStudy",
        "summary": "Get the published surveys in a study",
        "tags": [
          "Studies",
          "Surveys",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/studyId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SurveyList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v3/studies/{studyId}/uploadschemas/{schemaId}": {
      "delete": {
        "operationId": "deleteAllRevisionsOfUploadSchema",
        "summary": "Delete all revisions of an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/studyId"
          },
          {
            "$ref": "#/parameters/schemaId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/studies/{studyId}/uploadschemas/{schemaId}/revisions/{revision}": {
      "get": {
        "operationId": "getSchemaRevisionInStudy",
        "summary": "Get a schema revision from a study",
        "tags": [
          "Studies",
          "Surveys",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/studyId"
          },
          {
            "$ref": "#/parameters/schemaId"
          },
          {
            "$ref": "#/parameters/revision"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v3/studies/{studyId}/reports/{identifier}": {
      "get": {
        "operationId": "getPublicStudyReportRecords",
        "summary": "Get public study report records",
        "description": "Get public study report records (no authentication is needed, but index for the report must be marked as \npublic or the server will return 404 for the report). Only study reports may be made public.\n",
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/studyId"
          },
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "$ref": "#/parameters/startDate"
          },
          {
            "$ref": "#/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportDataList"
            }
          }
        }
      },
      "post": {
        "operationId": "saveReportForStudy",
        "summary": "save report for a study",
        "description": "Save a report for a specified study with arbitrary report id given by wokers into bridgePF.\n",
        "tags": [
          "Studies",
          "Reports",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/studyId"
          },
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "name": "body",
            "description": "Report data",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReportData"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v3/studies/{studyId}/uploads": {
      "get": {
        "operationId": "getUploadsInStudy",
        "summary": "Get uploads for a specified study",
        "tags": [
          "Studies",
          "Uploads",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/studyId"
          },
          {
            "$ref": "#/parameters/startTime"
          },
          {
            "$ref": "#/parameters/endTime"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/offsetKey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/cache": {
      "get": {
        "operationId": "getCacheKeys",
        "summary": "Get all the non-session Redis keys",
        "tags": [
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StringList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/cache/{cacheKey}": {
      "delete": {
        "operationId": "deleteCacheKeys",
        "summary": "Get all the non-session Redis keys",
        "tags": [
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cacheKey"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/recordexportstatuses": {
      "post": {
        "operationId": "updateRecordExportStatuses",
        "summary": "Updates the status of an export job",
        "description": "Updates the status of an export job on the health data records included in that job.\n",
        "tags": [
          "Record Export Statuses",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "RecordExportStatusRequest",
            "in": "body",
            "description": "A record export status request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecordExportStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    }
  },
  "definitions": {
    "SharingScope": {
      "type": "string",
      "description": "|Enum|Description|\n|---|---|\n|no_sharing| Do not share data generated by this participant with the study team;|\n|sponsors_and_partners|Share data with the study researchers and their researcher partners only;|\n|all_qualified_researchers|Share data with researchers who qualify under the specific governance qualifications to access the study's data set. This may include researchers beyond the sponsors of the original study.|\n",
      "enum": [
        "no_sharing",
        "sponsors_and_partners",
        "all_qualified_researchers"
      ]
    },
    "AccountStatus": {
      "type": "string",
      "description": "Status of a participant's account, for accounts that must verify an email address. \n\n|Status|Description|\n|---|---|\n|unverified|User has not consented to use the support email address.|\n|pending|System is waiting for the user to confirm the address.|\n|verified|User has consented and can sign in to the Bridge server.|\n\nOn creation, the initial status of a user account depends on the email verification policy of \nthe study. If verification is required, the account will be unverified until the participant \nverifies the email address; otherwise it will be enabled.\n",
      "enum": [
        "enabled",
        "disabled",
        "unverified"
      ]
    },
    "DataType": {
      "type": "string",
      "description": "The data type of the answer to a question. The actual value is always submitted in JSON \nas a string (so no type conversion occurs inadvertently during transfer); the data type \nindicates the intended type of the answer. Each data type has a unique \n[Constraints](#Constraints) object with constraints for that type.\n\n|Type|Description|\n|---|---|\n|string|A string value|\n|integer|An integer value|\n|decimal|A floating point value|\n|boolean|A boolean value (true or false)|\n|date|A date without a time or time zone component|\n|time|A time without a time zone component|\n|datetime|A specific date and time in a specific time zone|\n|duration|*Deprecated.* Use an integer value with a unit instead.|\n",
      "enum": [
        "duration",
        "string",
        "integer",
        "decimal",
        "boolean",
        "date",
        "time",
        "datetime"
      ]
    },
    "Environment": {
      "type": "string",
      "description": "This value should always be set to production.",
      "enum": [
        "local",
        "develop",
        "staging",
        "production"
      ]
    },
    "ScheduleType": {
      "type": "string",
      "description": "Schedules come in three major flavors:\n\n|Type|Description|\n|---|---|\n|once|Activity happens once and only once, and then is never scheduled again.|\n|recurring|Activity recurrs periodically, either through the use of a cron schedule, or through the use of properties like `interval`, `times` and `expires`.|\n|persistent|Activity is always in the participant's list of tasks to do. If it is finished, a new activity is scheduled immediately. Client applications may wish to show these differently in the UI.|\n",
      "enum": [
        "once",
        "recurring",
        "persistent"
      ]
    },
    "Role": {
      "type": "string",
      "description": "The roles assigned to this user. Normal study participants do not have any roles assigned, but for \ndevelopers, researchers, etc. their roles will appear hear (see main API documentation about the \nroles assigned by the Bridge server).\n\n|Role|Description|\n|---|---|\n|developer|A user with the rights to use the study configuration APIs (all admin APIs except for those APIs which expose information about study participants).|\n|researcher|The research role is assigned to users who have permission to see the users in a study and the activity of participants. We will assign this role to developers during the initial development of the application so they can view the uploads of test accounts, etc.|\n|admin|A Sage Bionetworks Bridge administrator (internal to Bridge).|\n|worker|A Sage Bionetworks worker process (internal to Bridge).|\n",
      "enum": [
        "developer",
        "researcher",
        "admin",
        "worker"
      ]
    },
    "ActivityType": {
      "type": "string",
      "description": "An activity represents either a survey or a task to be performed (not both).\n\n|Type|Description|\n|---|---|\n|compound|Activity represents multiple surveys or tasks.|\n|survey|Activity represents a survey. The activity should contain a survey stanza.|\n|task|Activity represents any other task. The activity should contain a task stanza.|\n",
      "enum": [
        "compound",
        "survey",
        "task"
      ]
    },
    "Unit": {
      "type": "string",
      "description": "The unit of measurement being used for a numeric value when it is expressing something like \na duration, weight, or length.\n\n## Duration\n|Type|Description|\n|---|---|\n|seconds|Seconds|\n|minutes|Minutes|\n|hours|Hours|\n|days|Days|\n|weeks|Weeks|\n|months|Months|\n|years|Years|\n\n## Imperial measures\n|Type|Description|\n|---|---|\n|inches|Inches|\n|feet|Feet|\n|yards|Yards|\n|miles|Miles|\n|ounces|Ounces|\n|pounds|Pounds|\n|pints|Pints|\n|quarts|Quarts|\n|gallons|Gallons|\n\n## Metric measures\n|Type|Description|\n|---|---|\n|centimeters|Centimeters|\n|meters|Meters|\n|kilometers|Kilometers|\n|grams|Grams|\n|kilograms|Kilgrams|\n|milliliters|Milliliters|\n|cubic_centimeters|Cubic centimeters (cc)|\n|liters|Liters|\n|cubic_meters|Cubic meters (m<sup>3</sup>)|\n",
      "enum": [
        "seconds",
        "minutes",
        "hours",
        "days",
        "weeks",
        "months",
        "years",
        "inches",
        "feet",
        "yards",
        "miles",
        "ounces",
        "pounds",
        "pints",
        "quarts",
        "gallons",
        "centimeters",
        "meters",
        "kilometers",
        "grams",
        "kilograms",
        "milliliters",
        "cubic_centimeters",
        "liters",
        "cubic_meters"
      ]
    },
    "MimeType": {
      "type": "string",
      "description": "Available MIME types:\n\n|Type|Description|\n|---|---|\n|text/plain|Plain text|\n|text/html|HTML|\n|application/pdf|PDF document|\n",
      "enum": [
        "text/plain",
        "text/html",
        "application/pdf"
      ]
    },
    "UIHint": {
      "type": "string",
      "description": "A string \"hint\" to the user interface about the kind of user interface component that should be used to render the question (see values, above). The survey designer provides this hint, but the client application may ignore it or map it to a different set of controls, as desired. For a given data type, there is a defined subset of valid UI hints, which are detailed in the constraints model object documentation.\n\n|Hint|Description|Conditions|\n|---|---|---|\n|checkbox|A checkbox that can be used for a boolean value, or for selecting zero or more multiple values from an enumerated list.|Question will always include an enumeration of answers to display.|\n|combobox|An input that allows a user to enter free form text, or select from an enumerated list of answers. An alternative representation would be a set of radio buttons, with the last button selecting an \"other\" option with an associated text input control.|Question will always include an enumeration of answers to display.|\n|datepicker|A control that allows a user to select a date (with no time of day component).||\n|datetimepicker|A control that allows a user to select a time of day on a specific date. It should default to the current day and allow easy selection of a time of day today.||\n|list|A control that shows a list, and allows for selection of zero or more elements. On some platforms, this is the same as a list of checkboxes (and in HTML can be rendered with a multiple select control).|Question will always include an enumeration of answers to display.|\n|multilinetext|A control for entering longer texts, at least showing multiple lines for input and possibly also providing additional controls (such as a simple WYSIWYG editor with cut-and-paste support or spell checking).||\n|numberfield|An input for entering numbers that includes \"spinner\" controls to increment or decrement a numeric value. The minimum and maximum values, as well as the amount the value is changed by these controls, should be defined by the minValue, maxValue, and step constraints of integer and decimal questions.||\n|radiobutton|Two or more controls that allow for exclusive selection of one item from a list of choices.This can be achieved as well through a list where only one item may be selected.|Question will always include an enumeration of answers to display.|\n|select|A select or picker control for selection of one option from a list of options.|Question will always include an enumeration of answers to display.|\n|slider|A slider control for selection of a continuous value, like a decimal number, or a scale control for selection either of a discrete value such as an integer or a set of string values (where such values are ordered and make sense in this presentation, e.g. \"no pain\" to \"extremely painful\"). If used for an integer or decimal question, the minimum and maximum value constraints, as well as the step constraint, should be used to define the behavior of the slider. If used for an enumerated set of values, each discrete setting of the control (it should not slide continuously) should select a value from the list.|Question **must** include an enumeration of answers to display if the data type is not integer or decimal.|\n|textfield|A single line text field. Note that if there are set values for this textfield, but the user can essentially enter an \"other\" value as well, then the combobox hint with a set of enumerated values should be used.||\n|timepicker|An input for entering a time with no reference to the date of the time.||\n|toggle|A switch or toggle control to select a boolean state||\n",
      "enum": [
        "checkbox",
        "combobox",
        "datepicker",
        "datetimepicker",
        "list",
        "multilinetext",
        "numberfield",
        "radiobutton",
        "select",
        "slider",
        "textfield",
        "timepicker",
        "toggle"
      ]
    },
    "Operator": {
      "type": "string",
      "description": "|Value|Operator meaning|\n|---|---|\n|eq|equal to|\n|ne|not equal to|\n|lt|less than|\n|gt|greater than|\n|le|less than or equal to|\n|ge|greater than or equal to|\n|de|user declines to answer this question (it is being skipped)|\n",
      "enum": [
        "eq",
        "ne",
        "lt",
        "gt",
        "le",
        "ge",
        "de"
      ]
    },
    "ReportType": {
      "type": "string",
      "description": "The type of report:\n\n|Type|Description|\n|---|---|\n|participant|Reports are scoped to an individual participant and can only be seen by the participant or a researcher|\n|study|Reports are available to all authenticated users in a study|\n",
      "enum": [
        "participant",
        "study"
      ]
    },
    "UploadStatus": {
      "type": "string",
      "description": "The status of the upload:\n\n|Status|Description|\n|---|---|\n|unknown|Upload status is unknown. This is generally used for older data formats (namely, Upload v1), which had a binary complete flag rather than an UploadStatus.|\n|requested|Initial state. Upload is requested. User needs to upload to specified URL and call uploadComplete.|\n|validation_in_progress|Client process has called uploadComplete. Upload validation is currently taking place.|\n|validation_failed|Upload validation has failed (see the validationMessageList for further details).|\n|succeeded|Upload has succeeded, including validation. Note that export to Synapse is a separate step.|\n",
      "enum": [
        "unknown",
        "requested",
        "validation_in_progress",
        "validation_failed",
        "duplicate",
        "succeeded"
      ]
    },
    "UploadSchemaType": {
      "type": "string",
      "description": "The type of data being uploaded.\n\n|Status|Description|\n|---|---|\n|ios_survey|Survey data|\n|ios_data|All other kinds of data (e.g. from sensors or tasks in your app).|\n|upload_v2|*Reserved for future use.*|\n",
      "enum": [
        "ios_data",
        "ios_survey",
        "upload_v2"
      ]
    },
    "SynapseExporterStatus": {
      "type": "string",
      "description": "The status of the job that exports the data of this upload to Synapse. \n\n|Value|Description|\n|---|---|\n|not_exported|Record related to this upload has not been exported to Synapse.|\n|succeeded|Record related to this upload has been exported to Synapse and is available to researchers.|\n",
      "enum": [
        "not_exported",
        "succeeded"
      ]
    },
    "ScheduleStatus": {
      "type": "string",
      "description": "Status of this activity.\n\n|Status|Description|\n|---|---|\n|scheduled|User should do this activity in the future.|\n|available|User should do this activity now.|\n|started|User has started this activity and sent a startedOn timestamp to the server.|\n|deleted|User had delete the activity (set a finishedOn timestamp with no startedOn timestamp).|\n|finished|User has finished the task (by sending a finishedOn timestamp to the server). The participant currently should not get these back from the server.|\n|expired|The activity was not started by the user, but now should no longer be done. The participant currently should not get these back from the server.|\n",
      "enum": [
        "deleted",
        "finished",
        "started",
        "expired",
        "scheduled",
        "available"
      ],
      "readOnly": true
    },
    "UploadFieldType": {
      "type": "string",
      "description": "This class is unusual in the API in that the `type` attribute is not a constant `UploadFieldDefinition` string, it \nis one of the enumerated values and indicates the type of the field, not the type of the model object:\n\n|Type|Description|\n|---|---|\n|attachment_v2|Attachment. When selected, `fileExtension` and `mimeType` can refine the field definition|\n|boolean|Boolean|\n|calendar_date|Date (no time of day)|\n|timestamp|Date &amp; Time (a timestamp)|\n|float|Decimal|\n|int|Integer|\n|string|String. When selected, `maxLength` and `unboundedText` can refine the field definition|\n|time_v2|Time of Day (no date or timezone)|\n|attachment_blob|Deprecated|\n|attachment_csv|Deprecated|\n|attachment_json_blob|Deprecated|\n|attachment_json_table|Deprecated|\n|duration_v2|Deprecated|\n|inline_json_blob|Deprecated|\n|multi_choice|Deprecated|\n|single_choice|Deprecated|\n",
      "enum": [
        "attachment_blob",
        "attachment_csv",
        "attachment_json_blob",
        "attachment_json_table",
        "attachment_v2",
        "boolean",
        "calendar_date",
        "duration_v2",
        "float",
        "inline_json_blob",
        "int",
        "multi_choice",
        "single_choice",
        "string",
        "time_v2",
        "timestamp"
      ]
    },
    "ABTestGroup": {
      "type": "object",
      "description": "A list of these groups define the way schedules are allocated in an ABTestScheduleStrategy \n(each schedule associated to a percentage). See [ABTestScheduleStrategy](#ABTestScheduleStrategy) \nfor details. \n",
      "required": [
        "percentage",
        "schedule"
      ],
      "properties": {
        "percentage": {
          "type": "integer",
          "description": "The percentage of users to assign to this schedule."
        },
        "schedule": {
          "description": "The schedule to assign to these users.",
          "$ref": "#/definitions/Schedule"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ABTestGroup"
        }
      }
    },
    "ABTestScheduleStrategy": {
      "description": "A strategy that divides users into groups according to a percentage scheme, assigning each \ngroup a different [Schedule](/#Schedule). The combined set of schedule groups should have \npercentages that add up to 100%. After the initial assignment, new users joining the study \nwill be randomly assigned to one of the groups in proportion to their percentage \nrepresentation in the study. \n\nNote that this assignment is truly random, so in small populations the percentages may diverge \nfrom those specified in the schedule plan.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleStrategy"
        },
        {
          "type": "object"
        },
        {
          "required": [
            "scheduleGroups"
          ]
        },
        {
          "properties": {
            "scheduleGroups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ABTestGroup"
              }
            }
          }
        }
      ]
    },
    "AbstractStudyParticipant": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "First name (given name) of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name (family name) of the user."
        },
        "externalId": {
          "type": "string",
          "description": "An externally-assignable identifier a research partner can use to re-identify a user's data \nin the exported data set (this must be provided by the application, it is not created by Bridge). \nIt is a string that can be set or updated to any value without constraints, unless Bridge is \nconfigured to manage the study's external IDs. Then the ID must be submitted on sign up, and cannot be \nmodified afterward.\n"
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "description": "An ID assigned to this account by Bridge system. This ID is exposed in the API and is different from the health code assigned to the user's anonymized data. Bridge never exports this ID along with the health code from Bridge."
        },
        "notifyByEmail": {
          "type": "boolean",
          "default": true,
          "description": "True if the user has consented to be contacted via email outside the application, false otherwise.\n"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of user profile attributes that have been set for this user (the attributes themselves \nmust be specified in the study's configuration, and the values are stored encrypted in case they \ncapture personally-identifying information).\n"
        },
        "sharingScope": {
          "$ref": "#/definitions/SharingScope"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the account was created."
        },
        "status": {
          "$ref": "#/definitions/AccountStatus"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "dataGroups": {
          "type": "array",
          "description": "The data groups set for this user. Data groups must be strings that are defined in the \nlist of all valid data groups for the study, as part of the study object. \n",
          "items": {
            "type": "string"
          }
        },
        "languages": {
          "type": "array",
          "description": "Two letter language codes to assign to this user (these are initially retrieved from the \nuser's `Accept-Language` header and then persisted as part of account configuration). \n",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AccountSummary": {
      "description": "Summary of a participant, used in APIs to search and retrieve participant accounts.  \n",
      "type": "object",
      "readOnly": true,
      "properties": {
        "firstName": {
          "type": "string",
          "description": "First (given) name of user."
        },
        "lastName": {
          "type": "string",
          "description": "Last (family) name of user."
        },
        "email": {
          "type": "string",
          "description": "Email address of user."
        },
        "id": {
          "type": "string",
          "description": "An identifier assigned to this user, used to retrieve a study participant record."
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "ISO 8601 date and time that the user account was created."
        },
        "status": {
          "$ref": "#/definitions/AccountStatus"
        },
        "studyIdentifier": {
          "$ref": "#/definitions/StudyIdentifier"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "AccountSummary"
        }
      }
    },
    "Activity": {
      "description": "When creating an activity as part of a Schedule, you will need to supply a SurveyReference or a TaskReference in the activity. When these are returned, any survey reference that points to the \"most recently published\" survey will be resolved to a specific survey revision (the one most recently published).\n\nScheduled activities may be requested into the future by the client, and then cached. So if a survey is changed and published, it may be a few days before participants receive the updated survey.\n",
      "type": "object",
      "required": [
        "label",
        "guid",
        "activityType"
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "A label to show the user for this activity."
        },
        "labelDetail": {
          "type": "string",
          "description": "Detail information for the activity (common uses have included indicating the number of \nquestions, or the average time it takes to complete the activity).\n"
        },
        "guid": {
          "type": "string"
        },
        "compoundActivity": {
          "$ref": "#/definitions/CompoundActivity"
        },
        "task": {
          "$ref": "#/definitions/TaskReference"
        },
        "survey": {
          "$ref": "#/definitions/SurveyReference"
        },
        "activityType": {
          "$ref": "#/definitions/ActivityType"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Activity"
        }
      }
    },
    "ClientInfo": {
      "description": "Describes the content of the `User-Agent` field in the format that is accepted and understandable to the Bridge server (see [REST API getting started](/articles/rest.html)).",
      "type": "object",
      "readOnly": true,
      "properties": {
        "appName": {
          "type": "string",
          "description": "The name of the application (e.g. \"Cardio Health\")."
        },
        "appVersion": {
          "type": "integer",
          "description": "The version of the application (must be a number, and should increase with every \nnew release of the application).\n"
        },
        "deviceName": {
          "type": "string",
          "description": "Information about the device (e.g. \"Unknown iPhone\")."
        },
        "osName": {
          "type": "string",
          "description": "The name of the operating system (conventional names are \"Android\" and \"iPhone OS\").\n"
        },
        "osVersion": {
          "type": "string",
          "description": "The version of the operating system (e.g. \"10.0.3\")."
        },
        "sdkName": {
          "type": "string",
          "description": "The name of the SDK being used (e.g. \"BridgeJavaSDK\")."
        },
        "sdkVersion": {
          "type": "integer",
          "description": "The version of the SDK being used (e.g. \"4\")."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ClientInfo"
        }
      }
    },
    "CmsPublicKey": {
      "description": "A JSON payload that includes the base 64 encoded, public key for CMS encryption of uploads for this \nstudy. Each study has a different CMS public key.\n",
      "type": "object",
      "readOnly": true,
      "required": [
        "publicKey"
      ],
      "properties": {
        "publicKey": {
          "type": "string",
          "description": "Base 64 encoded version of the public key for CMS encryption of upload data.    \n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "CmsPublicKey"
        }
      }
    },
    "CompoundActivity": {
      "type": "object",
      "description": "A pointer to a compound activity, which represents multiple schemas or survey's worth of tasks for a user to perform. The task ID is used to uniquely identify the compound activity, and the activity can contain one or more schemas or surveys. When creating a Schedule Plan, you should leave the schema and survey lists empty, and the scheduler will automatically resolve the compound activity from a compound activity definition, using the task ID as the key.",
      "required": [
        "taskIdentifier"
      ],
      "properties": {
        "schemaList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SchemaReference"
          }
        },
        "surveyList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SurveyReference"
          }
        },
        "taskIdentifier": {
          "type": "string",
          "description": "Task ID, used to uniquely identify the compound activity and to resolve the compound activity reference\nfrom the compound activity definition, where applicable.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "CompoundActivity"
        }
      }
    },
    "CompoundActivityDefinition": {
      "type": "object",
      "description": "A compound activity definition, which lives outside of but parallel to a schedule plan. Schedule plans contain compound activities references (compound activity objects with just a task ID and no schemas or surveys), and the scheduler will automatically resolve and populate the compound activity in returned scheduled activities.",
      "required": [
        "taskId"
      ],
      "properties": {
        "schemaList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SchemaReference"
          }
        },
        "surveyList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SurveyReference"
          }
        },
        "taskId": {
          "type": "string",
          "description": "Task ID, used to uniquely identify the compound activity and to resolve the compound activity reference\nfrom the compound activity definition, where applicable.\n"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The optimistic locking version of the survey. This value must be submitted as \npart of the next update of the model. If it does not match the value on the server, \na 409 error (Conflict) will prevent the update from occurring.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "CompoundActivity"
        }
      }
    },
    "ConsentSignature": {
      "description": "To consent to participation in a subpopulation (also known as a consent group), participants submit \ntheir electronic signature. This can include an image of their actual signature. \n\nAt the time of consent, participants also submit a decision on how widely they will share their \nmedical information with researchers (see the scope property of the ConsentSignature JSON object, below).\n\nHow you describe to participants the choice to share research data is important if they are to correctly \nunderstand the consequences of this decision. We suggest that applications present the following \nlanguage to users when making this choice:\n\n* **Option #1:** No data sharing. I do not agree to share my coded data (without my name) at this time;\n* **Option #2:** I agree to share my coded data (without my name) with researchers at the sponsor institution, and their partners, in order to conduct this study;\n* **Option #3:** I agree to share my coded data (without my name) with qualified researchers worldwide, for general health research.\n\nNote that if your study does re-identify participants in the study, this language will have to be adjusted.\n",
      "type": "object",
      "required": [
        "name",
        "birthdate",
        "scope"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The participant's name."
        },
        "birthdate": {
          "type": "string",
          "format": "date",
          "description": "The participant's date of birth in ISO 8601 format (YYYY-MM-DD)."
        },
        "imageData": {
          "type": "string",
          "description": "Base 64 encoded image of the participant's signature. If `imageData` is supplied, `imageMimeType` must also be supplied."
        },
        "imageMimeType": {
          "type": "string",
          "description": "Mime type of this image (e.g. \"image/png\"). If `imageData` is supplied, `imageMimeType` must also be supplied."
        },
        "scope": {
          "$ref": "#/definitions/SharingScope"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ConsentSignature"
        }
      }
    },
    "ConsentStatus": {
      "description": "A description of the participant's consent status in a particular subpopulation (consent group). This \nobject is never used to update state on the server (all fields are read only). \n",
      "type": "object",
      "readOnly": true,
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the subpopulation."
        },
        "subpopulationGuid": {
          "type": "string",
          "description": "The GUID for the subpopulation of this consent."
        },
        "required": {
          "type": "boolean",
          "description": "Is this consent required? If required, the user must consent to it before being given \naccess to the server (until signed, a 412 response is returned for most participant endpoints).\n"
        },
        "consented": {
          "type": "boolean",
          "description": "Has the participant consented to this consent agreement?"
        },
        "signedMostRecentConsent": {
          "type": "boolean",
          "description": "Was the consent to participate made against the most recently published version of this consent?"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ConsentStatus"
        }
      }
    },
    "Criteria": {
      "type": "object",
      "description": "Some objects, like Subpopulations and the schedules in a CriteriaScheduleStrategy, are \nmatched against user criteria in order to return the correct object. The criteria \nagainst which user information will be matched are described in the Criteria object. \nSee [Customizing Content for Participants](/articles/filtering.html) for a \nfuller explanation. \n",
      "properties": {
        "language": {
          "type": "string",
          "description": "A two-letter language code. The the must declare an `Accept-Language` header with \nthis language in order to match this object.\n"
        },
        "allOfGroups": {
          "type": "array",
          "description": "One or more data groups; the user must have all these data groups to match.",
          "items": {
            "type": "string"
          }
        },
        "noneOfGroups": {
          "type": "array",
          "description": "One or more data groups; the user must have none of these data groups to match.",
          "items": {
            "type": "string"
          }
        },
        "minAppVersions": {
          "type": "object",
          "description": "A map of operating system names to minimum app versions. The user must send a `User-Agent` header \nin a prescribed format, that declares the app version to be equal to or greater than this \nversion number, in order to match.\n",
          "additionalProperties": {
            "type": "integer"
          }
        },
        "maxAppVersions": {
          "type": "object",
          "description": "A map of operating system names to minimum app versions. The user must send a `User-Agent` header \nin a prescribed format, that declares the app version to be equal to or less than this \nversion number, in order to match.\n",
          "additionalProperties": {
            "type": "integer"
          }
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Criteria"
        }
      }
    },
    "CriteriaScheduleStrategy": {
      "description": "Contains a list of schedules, each of which is associated to a specific [Criteria](/#Criteria) object. \nBased on information submitted by the user and in the user's account settings, compare each \nschedule in order until one matches the criteria, and use that schedule to assign activities to the \nuser.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleStrategy"
        },
        {
          "type": "object"
        },
        {
          "required": [
            "scheduleCriteria"
          ]
        },
        {
          "properties": {
            "scheduleCriteria": {
              "type": "array",
              "description": "The list of schedules and their criteria.",
              "items": {
                "$ref": "#/definitions/ScheduleCriteria"
              }
            }
          }
        }
      ]
    },
    "DataGroups": {
      "type": "object",
      "description": "A payload that contains a string array of data groups.",
      "required": [
        "dataGroups"
      ],
      "properties": {
        "dataGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "DataGroups"
        }
      }
    },
    "Email": {
      "description": "Payload object for an email address.",
      "type": "object",
      "required": [
        "email",
        "studyIdentifier"
      ],
      "properties": {
        "email": {
          "type": "string",
          "description": "Participant's email."
        },
        "study": {
          "type": "string",
          "description": "String identifier if the participant's study."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Email"
        }
      }
    },
    "EmailTemplate": {
      "type": "object",
      "description": "A template for one of the system emails that are sent (email verification and password reset \nemails). \n\nIn the templates, variable strings can be used to interpolate values from the study or the \nindividual to which the email is being sent. **The body of the email template must have a \n${url} variable,** this is where the link back to the Bridge server will be inserted in \norder to complete the required transaction.\n\n|Template Variable|What it will be replaced with|\n|---|---|\n|${url}|Where the link back to the Bridge server will be inserted in order to complete the email verification/password reset|\n|${studyName}|The name of the study|\n|${sponsorName}|The sponsor of the study|\n|${supportEmail}|The support email for the study|\n|${technicalEmail}|The technical support email for the study|\n|${account.givenName}|User's first name|\n|${account.surname}|User's last name|\n|${account.email}|User's email|\n\nYour HTML will be sanitized to remove potential security issues like scripts, frames or embedded Flash objects.\n",
      "required": [
        "subject",
        "mimeType",
        "body"
      ],
      "properties": {
        "subject": {
          "type": "string",
          "description": "The subject line of the email message (no markup allowed)"
        },
        "mimeType": {
          "$ref": "#/definitions/MimeType"
        },
        "body": {
          "type": "string",
          "description": "The body text of the email message (can be text or HTML, but the mimeType must be set appropriately)"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "EmailTemplate"
        }
      }
    },
    "EmailVerification": {
      "description": "A JSON payload to sent the email confirmation token (retrieved from the user's email) \nback to the Bridge server.\n",
      "type": "object",
      "required": [
        "sptoken"
      ],
      "properties": {
        "sptoken": {
          "type": "string",
          "description": "The token sent via email to the user that is needed to verify the email address is accessible to that user"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "EmailVerification"
        }
      }
    },
    "EmailVerificationStatus": {
      "description": "The status of the email address that will be used to send consents to users. \nThe consents are sent on behalf of the study using the study's support email \naddress, and our email provider (Amazon's SES) requires that the address holder \nconfirm this is an allowed use of the address. \n",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "$ref": "#/definitions/AccountStatus"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "EmailVerificationStatus"
        }
      }
    },
    "ExternalIdentifier": {
      "description": "An external identifier assigned to a participant's account to allow external \nre-identification of the user by the study sponsor.\n",
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string",
          "description": "The external identifier."
        },
        "assigned": {
          "type": "boolean",
          "readOnly": true,
          "description": "If true, the identifier has been assigned to an account, otherwise false."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ExternalIdentifier"
        }
      }
    },
    "GuidCreatedOnVersionHolder": {
      "description": "An object that describes the keys and optimistic lock values of a Survey. This object\nis returned from create and update endpoints rather than an entire survey.\n",
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "readOnly": true,
          "description": "The guid of the survey (added when the survey is created)."
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The createdOn value of the survey (added when survey is created)."
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "readOnly": true,
          "description": "The optimistic locking version of the survey. This value must be submitted as \npart of the next update of the model. If it does not match the value on the server, \na 409 error (Conflict) will prevent the update from occurring.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "GuidCreatedOnVersionHolder"
        }
      }
    },
    "GuidHolder": {
      "description": "An object that provides the GUID for a newly created entity. This object is returned \nfrom create and update endpoints rather than an entire entity.\n",
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "readOnly": true,
          "description": "The guid of the newly created entity."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "GuidHolder"
        }
      }
    },
    "GuidVersionHolder": {
      "description": "An object that describes the keys and optimistic lock values of an entity (e.g. a \nSubpopulation or SchedulePlan). This object is returned from create and update endpoints \nrather than an entire entity.\n",
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "readOnly": true,
          "description": "The guid of the entity (added when the entity is created)."
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "readOnly": true,
          "description": "The optimistic locking version of the survey. This value must be submitted as \npart of the next update of the model. If it does not match the value on the server, \na 409 error (Conflict) will prevent the update from occurring.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "GuidVersionHolder"
        }
      }
    },
    "HealthDataRecord": {
      "description": "See [Bridge Upload Data Format](/articles/study_design/upload_data_format.html) for details about this model object.\n",
      "readOnly": true,
      "type": "object",
      "properties": {
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "ISO timestamp of when the data record was created, as reported by the submitting app"
        },
        "createdOnTimeZone": {
          "type": "string",
          "description": "The original timezone of the createdOn timestamp, expressed as a 4-digit string with sign. For example, -0800, +0900"
        },
        "data": {
          "type": "object",
          "description": "JSON map with key value pairs representing the record's data."
        },
        "id": {
          "type": "string",
          "description": "A unique GUID for this record."
        },
        "metadata": {
          "type": "object",
          "description": "Arbitrary JSON blob of record metadata, as submitted by the app. For \nResearchKit-based apps, this is info.json verbatim.\n"
        },
        "schemaId": {
          "type": "string",
          "description": "[UploadSchema](#UploadSchema) ID for the record.\n"
        },
        "schemaRevision": {
          "type": "integer",
          "format": "int64",
          "description": "[UploadSchema](#UploadSchema) revision for the record.\n"
        },
        "studyId": {
          "type": "string",
          "description": "Study that this record lives in."
        },
        "uploadDate": {
          "type": "string",
          "format": "date",
          "description": "Calendar date in YYYY-MM-DD format representing when the server received the upload, \nusing the server's local time zone (US Pacific timezone).\n"
        },
        "uploadId": {
          "type": "string",
          "description": "The upload GUID of the upload this record is processed from."
        },
        "uploadedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time of the upload."
        },
        "userSharingScope": {
          "type": "string",
          "description": "The user's sharing scope at the time of this upload's submission.",
          "$ref": "#/definitions/SharingScope"
        },
        "userExternalId": {
          "type": "string",
          "description": "The user's external ID at the time of this upload's submission."
        },
        "userDataGroups": {
          "type": "array",
          "description": "The user's data groups at the time of this upload's submission.",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "A version number issued for optimistic locking of record updates. Should not be \nset when creating a new health data record. When updating a record retrieved from \nthe API, the object will have the version attribute and this must match the last \nvalue issued by the service or an update will fail.\n"
        },
        "synapseExporterStatus": {
          "$ref": "#/definitions/SynapseExporterStatus"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "HealthDataRecord"
        }
      }
    },
    "IdentifierHolder": {
      "description": "An object that holds an identifier for a created entity.\n",
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string",
          "readOnly": true,
          "description": "The identifier of the entity (added when the entity is created)."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "IdentifierHolder"
        }
      }
    },
    "Image": {
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "source": {
          "type": "string",
          "description": "An URL to an image. It is strongly recommended that the image be an SVG (vector graphics, \nre-scalable to the target device's screen size and resolution), **or** at least 600 by 400 \npixels in size, if not larger (some phones have screens of up to 800 or more pixels \nacross the screen).\n"
        },
        "width": {
          "type": "integer",
          "description": "The width of the image in pixels. If image is present, this field is required."
        },
        "height": {
          "type": "integer",
          "description": "The height of the image in pixels. If image is present, this field is required."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Image"
        }
      }
    },
    "InvalidEntity": {
      "description": "Payload returned with a 400 error when an entity submitted to the server is invalid.\n",
      "type": "object",
      "readOnly": true,
      "properties": {
        "message": {
          "type": "string",
          "description": "A message that will include all validation error messages for this object."
        },
        "errors": {
          "type": "object",
          "description": "Errors broken down by the part of the JSON payload that generated them. The keys are \"paths\" representing \nfragments of the JSON (expressed in JavaScript object/array notation), and the values are string arrays of \none or more errors for that element of the JSON. An example makes this clearer:\n\n```json\n\"errors\":{  \n    \"identifier\":[  \n        \"identifier is required\"\n    ],\n    \"elements[0].identifier\":[  \n        \"elements[0].identifier is required\"\n    ],\n    \"elements[0].constraints.enumeration\":[  \n        \"enumeration must have non-null, non-empty choices list\"\n    ],\n    \"elements[0].prompt\":[  \n        \"elements[0].prompt is required\"\n    ]\n}\n```\n",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "NotificationMessage": {
      "type": "object",
      "required": [
        "subject",
        "message"
      ],
      "properties": {
        "subject": {
          "type": "string",
          "description": "Very short rendition of the notification. For example, this value will be displayed on an \nApple iWatch, where the message is shown for a short time only.\n"
        },
        "message": {
          "type": "string",
          "description": "Full notification message.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "NotificationMessage"
        }
      }
    },
    "NotificationRegistration": {
      "type": "object",
      "required": [
        "deviceId",
        "osName"
      ],
      "properties": {
        "guid": {
          "type": "string"
        },
        "deviceId": {
          "description": "This should be either the device token retrieved from the iOS operation system, or the \nregistrationId on Android.\n",
          "type": "string"
        },
        "osName": {
          "description": "Information used to track which type of deviceId is being submitted. This string should be \neither \"Android\" or \"iPhone OS\" (\"iOS\" also works), and should match the operating system \nfrom which you retrieved a push notification identifier (deviceId).\n",
          "type": "string"
        },
        "createdOn": {
          "description": "Date the client registered for push notifications with Bridge.\n",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "modifiedOn": {
          "description": "The last time the registration was updated based on a new device identifier being \nissued by the client operating system (iOS or Android). If an updated registration is \nsubmitted but the deviceId has not changed, the record is not modified.\n",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "NotificationRegistration"
        }
      }
    },
    "NotificationTopic": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "guid": {
          "description": "A unique GUID for this topic",
          "type": "string"
        },
        "name": {
          "description": "The name of this topic (visible to developers and researchers in design tools).\n",
          "type": "string"
        },
        "description": {
          "description": "Description of the purpose of this topic (visible to developers and researchers in \ndesign tools).\n",
          "type": "string"
        },
        "createdOn": {
          "description": "The date and time this topic was created.\n",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "modifiedOn": {
          "description": "The date and time this topic was last modified.\n",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "NotificationTopic"
        }
      }
    },
    "PasswordPolicy": {
      "description": "The rules to enforce on the creation of passwords for Bridge accounts.\n",
      "type": "object",
      "required": [
        "minLength"
      ],
      "properties": {
        "minLength": {
          "type": "integer",
          "minimum": 2,
          "maximum": 100,
          "default": 8,
          "description": "The minimum number of characters that's required in the password."
        },
        "numericRequired": {
          "type": "boolean",
          "default": true,
          "description": "Is at least one number required in the password? (0-9)."
        },
        "symbolRequired": {
          "type": "boolean",
          "default": true,
          "description": "Is at least one ASCII symbol (non-letter, non-number) required in the \npassword? (! \" # $ % &amp; ' ( ) * + , - . / : ; &lt; = &gt; ? @ [ \\ ] ^ _ ` { ¦ } ~).\n"
        },
        "lowerCaseRequired": {
          "type": "boolean",
          "default": true,
          "description": "Is at least one lower-case letter required? (a-z)."
        },
        "upperCaseRequired": {
          "type": "boolean",
          "default": true,
          "description": "Is at least one upper-case letter required? (A-Z)."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "PasswordPolicy"
        }
      }
    },
    "PasswordReset": {
      "description": "Payload to send a new password to the Bridge server.",
      "type": "object",
      "required": [
        "password",
        "sptoken"
      ],
      "properties": {
        "password": {
          "type": "string",
          "format": "password",
          "description": "New password to use."
        },
        "sptoken": {
          "type": "string",
          "description": "This is a one-time use token issued to the user to change his or her password. \nNormally this is emailed to the user's email account, using a link back to the \nBridge web interface where it is extracted to complete this API call.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "PasswordReset"
        }
      }
    },
    "RecordExportStatusRequest": {
      "description": "A payload sending back the status of an export of one or more health data records to Synapse. \nUsed to trace the upload of data to the Synapse data repository. \n",
      "type": "object",
      "required": [
        "recordIds",
        "synapseExporterStatus"
      ],
      "properties": {
        "recordIds": {
          "type": "array",
          "description": "One or more [HealthDataRecord](#HealthDataRecord) IDS.",
          "items": {
            "type": "string"
          }
        },
        "synapseExporterStatus": {
          "$ref": "#/definitions/SynapseExporterStatus"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "RecordExportStatusRequest"
        }
      }
    },
    "ReportData": {
      "description": "The JSON data for one time point of a report (curently a day expressed in the format YYYY-MM-DD). Data can be for a study as a whole or a report on a single participant depending on the endpoint that is used to persist the data in Bridge.",
      "type": "object",
      "required": [
        "date",
        "data"
      ],
      "properties": {
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date (YYYY-MM-DD) of the report data."
        },
        "data": {
          "type": "object",
          "description": "An arbitrary JSON object containing whatever data should be saved for a report."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ReportData"
        }
      }
    },
    "ReportDataForWorker": {
      "description": "The JSON data to submit a report record for a point in time (curently a day expressed in the format YYYY-MM-DD). This object includes a healthCode because worker processes, as they produce records for a participant report, may be working from anonymized data.",
      "type": "object",
      "required": [
        "date",
        "data"
      ],
      "properties": {
        "healthCode": {
          "type": "string",
          "description": "The health code of the person for whom this data is being created.\n"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date (YYYY-MM-DD) of the report data."
        },
        "data": {
          "type": "object",
          "description": "An arbitrary JSON object containing whatever data should be saved for a report."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ReportData"
        }
      }
    },
    "ReportIndex": {
      "description": "An identifier to retrieve a series of report data (e.g. \"three-week-report\"). A separate list of these \nare maintained for study and participant reports.\n",
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string",
          "description": "The report identifier."
        },
        "public": {
          "type": "boolean",
          "description": "Study reports can be marked as \"public\", which will make them accessible through the API \nto any requester (authentication is not required).\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ReportIndex"
        }
      }
    },
    "RequestInfo": {
      "description": "Some basic information is captured when a participant makes a request to the Bridge server, \nmostly for the purpose of troubleshooting user issues with the application or the study. \nQuestions that can be answered include:\n\n* what version of the app is this participant using?\n* what filtering criteria might be applied to their requests?\n* when was the last time they uploaded data or retrieved activities?\n* do they have a session right now, or have they contacted the server recently at all?\n\nThis information is cached but not persisted; it is not guaranteed to be present for all active users.\n",
      "type": "object",
      "readOnly": true,
      "required": [
        "userId",
        "studyIdentifier"
      ],
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user's account ID."
        },
        "clientInfo": {
          "$ref": "#/definitions/ClientInfo",
          "description": "The `User-Agent` string from the last request as parsed for the purpose of applying filtering \ncriteria.\n"
        },
        "userAgent": {
          "type": "string",
          "description": "The `User-Agent` header exactly as it was sent to the server, whether it is parseable \nby the Bridge server or not. \n"
        },
        "languages": {
          "type": "array",
          "description": "The language or languages sent in the user's `Accept-Language` header and persisted as part of \nthe participant's account configuration, as they were set at the time of the last request.\n",
          "items": {
            "type": "string"
          }
        },
        "userDataGroups": {
          "type": "array",
          "description": "The data groups assigned to this participant at the time of the last request.",
          "items": {
            "type": "string"
          }
        },
        "activitiesAccessedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The last recorded time the participant's application requested scheduled activities \nfrom the server.\n"
        },
        "signedInOn": {
          "type": "string",
          "format": "date-time",
          "description": "The last recorded time the participant signed in to the server.\n"
        },
        "timeZone": {
          "type": "string",
          "description": "The user's time zone at the time of the last request."
        },
        "studyIdentifier": {
          "$ref": "#/definitions/StudyIdentifier"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ClientInfo"
        }
      }
    },
    "Schedule": {
      "description": "For more information about scheduling, see [Scheduling](/articles/study_design/scheduling.html).\n",
      "type": "object",
      "required": [
        "label",
        "scheduleType",
        "times",
        "activities",
        "persistent"
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "A label to describe this schedule."
        },
        "scheduleType": {
          "$ref": "#/definitions/ScheduleType"
        },
        "eventId": {
          "type": "string",
          "description": "A comma-separated list of event IDs against which will be used for scheduling. If no eventId is provided, \nthe event `enrollment` will be used. The system will use the first event ID (working left to right) for \nwhich the user has an event with a timestamp.\n"
        },
        "delay": {
          "type": "string",
          "description": "ISO 8601 duration string. An amount of time to wait before scheduling the first task. \n"
        },
        "interval": {
          "type": "string",
          "description": "An ISO 8601 duration, describing the period in days between tasks (it can be days, weeks, months or \neven years, but should not be smaller than a day). If this is used, cronTrigger should not be used.\n"
        },
        "expires": {
          "type": "string",
          "description": "ISO 8601 duration string. The period of time after which an unstarted, scheduled activity should be \nremoved from the application (if it has not been started, no data will have been saved on the server). \nThis is mandatory for recurring schedules so that unstarted activities do not stack up in the user's \nUI.\n"
        },
        "cronTrigger": {
          "type": "string",
          "description": "A cron expression will schedule recurring tasks according to this standard syntax for describing event \nschedules from the Unix operating system. The format of the cron expression is the seven field format \nas described in the documentation for the Java Quartz Scheduler (note that there are other formats \nthat take up to eleven fields, this online cron expression generator creates expressions in the right \nformat). If this is used, the interval and times are ignored.\n"
        },
        "startsOn": {
          "type": "string",
          "description": "The scheduler will not create a task before this date and time.",
          "format": "date-time"
        },
        "endsOn": {
          "type": "string",
          "description": "The scheduler will not create a task after this date and time. **Note that \nthis takes precedence over the minimumPerSchedule setting that can be provided via the API. Tasks will \nnot be \"topped up\" to this minimum if they extend outside of this time window.**\n",
          "format": "date-time"
        },
        "times": {
          "type": "array",
          "description": "Required if an interval is specified (ignored if a cron expression is specified). An array of one or \nmore ISO 8601 time values (without a date or time zone, e.g. \"14:00\"). One task will be created for \neach time on the day determined by the rest of the scheduler. If the schedule occurs once, only the \nfirst time will be used to schedule the task (and if no time is provided, the original time of the \ntriggering event will be used; it's clearest to set a time).\n",
          "items": {
            "type": "string",
            "description": "24hr time value(s) without a time zone (e.g. \"14:30\"). **Each time value will create a \nseparate task, one for each activity in the schedule.**\n"
          }
        },
        "persistent": {
          "type": "boolean",
          "description": "True if schedule type is persistent. (This is here for legacy reasons.)"
        },
        "activities": {
          "type": "array",
          "description": "One or more activities that should be done by a participant on this schedule. \nEach activity will generate a separate task. See Activity.\n",
          "items": {
            "$ref": "#/definitions/Activity"
          }
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Schedule"
        }
      }
    },
    "ScheduleCriteria": {
      "description": "In a [CriteriaScheduleStrategy](#CriteriaScheduleStrategy), a list of ScheduleCriteria objects relate \neach schedule to a set of criteria that needs to match the user's request in order to select that \nschedule for the user.\n",
      "type": "object",
      "required": [
        "criteria",
        "schedule"
      ],
      "properties": {
        "criteria": {
          "$ref": "#/definitions/Criteria"
        },
        "schedule": {
          "$ref": "#/definitions/Schedule"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ScheduleCriteria"
        }
      }
    },
    "SchedulePlan": {
      "description": "A schedule plan relates schedules to some specific strategies for using these schedules to create \nactivities for participants.\n",
      "type": "object",
      "required": [
        "guid",
        "label",
        "version",
        "strategy"
      ],
      "properties": {
        "guid": {
          "type": "string"
        },
        "label": {
          "type": "string",
          "description": "The name of this schedule plan (not shown to users)."
        },
        "modifiedOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "strategy": {
          "$ref": "#/definitions/ScheduleStrategy"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The optimistic locking version of the survey. This value must be submitted as \npart of the next update of the model. If it does not match the value on the server, \na 409 error (Conflict) will prevent the update from occurring.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SchedulePlan"
        }
      }
    },
    "ScheduleStrategy": {
      "type": "object",
      "discriminator": "type",
      "required": [
        "type"
      ],
      "description": "This is an interface for several implementations. See \n[scheduling](/articles/scheduling.html) for further information on \ncreating schedules.\n",
      "properties": {
        "type": {
          "type": "string"
        }
      }
    },
    "ScheduledActivity": {
      "description": "Description of an activity (such as a task or survey) the study would like the participant to perform. \nA scheduled activity will contain a reference to a task or survey, but not both, and the activityType \nwill reflect which property exists on the activity (e.g. if a task is defined, the activityType will be \n\"task\"). \n",
      "type": "object",
      "required": [
        "guid",
        "startedOn",
        "finishedOn"
      ],
      "properties": {
        "guid": {
          "type": "string",
          "readOnly": true
        },
        "schedulePlanGuid": {
          "type": "string",
          "readOnly": true
        },
        "startedOn": {
          "type": "string",
          "description": "This field is filled out by the client to persist the fact that a task has been started.",
          "format": "date-time"
        },
        "finishedOn": {
          "type": "string",
          "description": "This field is filled out by the client to persist the fact that a task has been finished. To delete a task, \nsimply mark startedOn and finishedOn with the same timestamp.\n",
          "format": "date-time"
        },
        "scheduledOn": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the activity should be made available to the participant. It's fine to show the activity \nbefore this, but the user should not be able to start it until this time has passed.\n",
          "readOnly": true
        },
        "expiresOn": {
          "type": "string",
          "format": "date-time",
          "description": "The time after which this task should no longer be made available to the participant. It will also no longer be \nreturned from the server API. \n",
          "readOnly": true
        },
        "activity": {
          "$ref": "#/definitions/Activity",
          "readOnly": true
        },
        "persistent": {
          "type": "boolean",
          "description": "Is this activity persistent? If so, it will never be removed from the list of activities; the client may \nwish to provide different UI for such a task.\n",
          "readOnly": true
        },
        "clientData": {
          "type": "object",
          "description": "An arbitrary object that will be serialized and stored as JSON using the GSON serialization \nmechanisms. In Java this field is an Object; since the type of the object is not known, \nthe rest-client includes a utility method:\n```\nMyCustomObject data = RestUtils.toType(\n    activity.getClientData(), MyCustomObject.class);\n```\n"
        },
        "status": {
          "$ref": "#/definitions/ScheduleStatus"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ScheduledActivity"
        }
      }
    },
    "SchemaReference": {
      "type": "object",
      "description": "A pointer to an upload schema defined for this survey. This schema represents a particular task or activity that the participant should perform, and tells the app which schema ID and revision number to associate the data upload with. If the revision number is set to null when creating a schedule plan, then the reference is to the most recent revision for the given OS and app version. The specific revision number that should be used will be resolved when a [ScheduledActivity](#ScheduledActivity) is created for the participant).",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Schema ID"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Schema revision number. Can be blank in a Schedule Plan if you want the Scheduler to automatically resolve\nto the latest revision for the user's app version.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SchemaReference"
        }
      }
    },
    "SharingScopeForm": {
      "type": "object",
      "required": [
        "scope"
      ],
      "properties": {
        "scope": {
          "$ref": "#/definitions/SharingScope"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SharingScope"
        }
      }
    },
    "SignIn": {
      "description": "Information to sign in to the Bridge server.",
      "type": "object",
      "required": [
        "study",
        "email",
        "password"
      ],
      "properties": {
        "study": {
          "type": "string",
          "description": "Study identifier of the participant's study"
        },
        "email": {
          "type": "string",
          "description": "User's email address"
        },
        "password": {
          "type": "string",
          "format": "password",
          "description": "User's password"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SignIn"
        }
      }
    },
    "SignUp": {
      "description": "The information necessary to sign up for a Bridge study. **Only the study's ID, an email address, and a password \nare required to sign up for a study.** However, all the information of \n[AbstractStudyParticipant](#AbstractStudyParticipant) can be submitted at sign up. In some configurations of \nthe server, for example, an `externalId` value must be submitted at the time of sign up.\n",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractStudyParticipant"
        },
        {
          "type": "object"
        },
        {
          "required": [
            "study",
            "email",
            "password"
          ]
        },
        {
          "properties": {
            "study": {
              "type": "string",
              "description": "The study ID of the study the participant is joining."
            },
            "email": {
              "type": "string",
              "description": "The user's email. Users can use the same email for different studies, but their account \nis identified by the email within a study.\n"
            },
            "password": {
              "type": "string",
              "format": "password",
              "description": "User's password."
            },
            "consent": {
              "type": "boolean",
              "description": "**Create user API  for admins only.** Create this user consented to all required consents. \nFor testing purposes only.\n"
            },
            "type": {
              "type": "string",
              "readOnly": true,
              "description": "SignUp"
            }
          }
        }
      ]
    },
    "SimpleScheduleStrategy": {
      "description": "The SimpleScheduleStrategy uses the same schedule for every participant. It is the easiest way to \nschedule activities and is a good place to start when building a schedule.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleStrategy"
        },
        {
          "type": "object"
        },
        {
          "required": [
            "schedule",
            "type"
          ]
        },
        {
          "properties": {
            "schedule": {
              "$ref": "#/definitions/Schedule"
            }
          }
        }
      ]
    },
    "Study": {
      "description": "A study with its many configuration options.\n",
      "type": "object",
      "required": [
        "name",
        "sponsorName",
        "supportEmail",
        "technicalEmail",
        "identifier",
        "consentNotificationEmail",
        "version"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "A label for the study. This will be shown to users in emails and other contexts."
        },
        "sponsorName": {
          "type": "string",
          "description": "The name of the institution or organization that is conducting the study."
        },
        "supportEmail": {
          "type": "string",
          "description": "The email address that will be given to study participants and other end users to contact for support \nrequests. This can be a comma-separated list of email addresses. Email will be sent via this email address.  \n"
        },
        "technicalEmail": {
          "type": "string",
          "description": "The email address for a technical contact who can coordinate with the Bridge Server team on technical \nissues (client or server). This can be a comma-separated list of email addresses.\n"
        },
        "consentNotificationEmail": {
          "type": "string",
          "description": "Copies of all consent agreements and withdrawals will be emailed to this address. This can be a comma-separated \nlist of email addresses.\n"
        },
        "identifier": {
          "type": "string",
          "description": "A user selected identifier that is unique relative to all other Bridge studies (lower-case letters and dashes only). \nThe identifier serves as a \"domain\" that scopes accounts to that study, and is usually created by combining an \ninstitution and study tag or acronym. For example, if you work at the University of Washington and your study is on \nAsthma in Children, your identifier might be `uw-child-asthma`. Participants will not see this identifier.\n"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "A version number used for optimistic locking of the object these keys represent; this value must be passed \nback to the server on updates. If the version doesn't match the version in the database, an error will be \nreturned (409 Conflict) and the study will not be saved. \n"
        },
        "minAgeOfConsent": {
          "type": "integer",
          "default": 18,
          "description": "The minimum required age for participants in the study. If the user reports they are younger than this age, they will not be allowed to consent to the research.\n"
        },
        "synapseDataAccessTeamId": {
          "type": "integer",
          "format": "int64",
          "description": "Synapse team ID that is granted read access to exported health data records.\n"
        },
        "synapseProjectId": {
          "type": "string",
          "description": "The Synapse project to export health data records to."
        },
        "usesCustomExportSchedule": {
          "type": "boolean",
          "description": "**Note: Bridge engineers will normally set this value when setting up data export. You should probably leave this \nsetting as is.** By default, all studies are exported using the default nightly schedule. Some studies may need \ncustom schedules for hourly or on-demand exports. To prevent this study from being exported twice (once by the \ncustom schedule, once by the default schedule), you should set this attribute to true.\n"
        },
        "userProfileAttributes": {
          "type": "array",
          "description": "Custom attributes that can be added to the StudyParticipant object (as members of the attributes property). For \nexample, if you wished to collect a telephone number for participants and had permission to do so, you could add \nthe \"telephone\" attribute. The map of a user's profile attributes can be personally identifying health information; \nit will be stored encrypted and in a separate data store from the participant's health data.\n",
          "items": {
            "type": "string"
          }
        },
        "taskIdentifiers": {
          "type": "array",
          "description": "An enumerated list of **unique** strings that can be used to identify tasks when creating schedules. These mostly \nserve to prevent typos when designing schedules, which would prevent client scheduling from working. There's no hard \nlimit on the string content (e.g. \"Tapping Test\" is fine as a task identifier, as long as it uniquely identifies a \ntask known to the application).\n",
          "items": {
            "type": "string"
          }
        },
        "dataGroups": {
          "type": "array",
          "description": "An enumerated list of **unique** strings that can be assigned to user accounts. This is a list of the \"tags\" that \ncan be assigned to a given user. The specific data groups that *are* assigned to a user will be exported with a \nparticipant's health data to Synapse. This can be used to identify test users or specific cohorts in the study, but \nit should not include sensitive health information about participants. Strings must contain only letters, numbers, \nunderscore or dash, and cannot (as a comma-separated list) exceed the character limit of 100 characters so they \ncan be exported to Synapse.\n",
          "items": {
            "type": "string"
          }
        },
        "passwordPolicy": {
          "description": "Settings that will govern what is accepted as a valid password when users sign up for the study. If not included, the password policy will default to requiring 8 characters, including lower and upper-case letters, at least one number and at least one symbol.\n",
          "$ref": "#/definitions/PasswordPolicy"
        },
        "verifyEmailTemplate": {
          "description": "The template for emails delivered to users during sign up, asking them to verify their email address.\n",
          "$ref": "#/definitions/EmailTemplate"
        },
        "resetPasswordTemplate": {
          "description": "The template for emails delivered to users who ask to reset their passwords.",
          "$ref": "#/definitions/EmailTemplate"
        },
        "active": {
          "type": "boolean",
          "readOnly": true
        },
        "strictUploadValidationEnabled": {
          "description": "True if uploads in this study should fail on strict validation errors.",
          "type": "boolean"
        },
        "healthCodeExportEnabled": {
          "type": "boolean",
          "description": "**Can only be set by an administrator.** Should user health codes be exported as part of the participant roster? This identifies users in the public data set; this can only be set to true for certain studies where users expect to be identified by researchers.\n"
        },
        "emailVerificationEnabled": {
          "type": "boolean",
          "description": "**Can only be set by an administrator.** Should users be asked to validate that they control the email addresses they use to sign up for the study? True by default.\n"
        },
        "externalIdValidationEnabled": {
          "type": "boolean",
          "default": false,
          "description": "**Can only be set by an administrator.** Should external identifiers be validated? If this is false, then the external ID is treated as an unconstrained string. If this is true, the study designer will need to enter the list of valid codes into Bridge. Bridge will ensure that the following is true:\n\n* When assigned, the ID will have to match one of the IDs entered into Bridge;\n* A given ID will be assigned to one and only one user;\n* Once assigned, it is not possible to change or remove the external ID from the user account.\n"
        },
        "externalIdRequiredOnSignup": {
          "type": "boolean",
          "default": false,
          "description": "**Can only be set by an administrator.** Should the external ID be required on sign up? If this is true and external ID validation is enabled, this study can support lab codes (where the username and password are auto-generated from the external ID and the user only needs to enter a code).\n"
        },
        "disableExport": {
          "type": "boolean",
          "default": false,
          "description": "If set this field to true, Bridge Exporter will not export this study at all during exporting.\n"
        },
        "minSupportedAppVersions": {
          "type": "object",
          "description": "Minimum supported app versions (older versions will be blocked), keyed by the \nname of the operating system (we expect either \"Android\" or \"iPhone OS\" in the \nUser-Agent header of all requests sent to the server). Example: `{\"iPhone OS\":14,\"Android\":10}`\n",
          "additionalProperties": {
            "type": "integer"
          }
        },
        "pushNotificationARNs": {
          "type": "object",
          "description": "A map between operating system names, and the platform ARN necessary to register a device to \nreceive mobile push notifications. The operating system names are currently \"Android\" and \n\"iPhone OS\". The ARN (Amazon Resource Name) is the name of the Application/platform ARN defined \nin SNS (currently this must be done by a Bridge administrator).\n",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Study"
        }
      }
    },
    "StudyAndUsers": {
      "description": "The holder object for Study, a list of User and a list of admin IDs\n",
      "type": "object",
      "required": [
        "adminIds",
        "study",
        "users"
      ],
      "properties": {
        "adminIds": {
          "type": "array",
          "description": "A list of Synapse admin user IDs.",
          "items": {
            "type": "string"
          }
        },
        "study": {
          "type": "string",
          "description": "A label to show the user for this activity.",
          "$ref": "#/definitions/Study"
        },
        "users": {
          "type": "array",
          "description": "A list of users in the new Study.",
          "items": {
            "$ref": "#/definitions/StudyParticipant"
          }
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "StudyAndUsers"
        }
      }
    },
    "StudyConsent": {
      "type": "object",
      "description": "For historical reasons, a revision of a consent document is known as a \"study consent\" (it would more accurate to call it \na \"subpopulation consent\"). It is a revision of the consent document that is associated with a subpopulation.\n\nSubpopulations can be used to group users for several purposes, but the most important use of subpopulations is to divide \nusers into different *consent groups.* \n\n**Note:** calls that return lists of these study consents do not populate the `documentContent` property. You must retrieve an \nindividual study consent to get the content of the consent.\n",
      "required": [
        "subpopulationGuid",
        "createdOn",
        "documentContent"
      ],
      "properties": {
        "subpopulationGuid": {
          "type": "string",
          "description": "The guid of the subpopulation to which this consent belongs."
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "The time the document was created on the server. Each update of the consent document creates a new revision \nat a new `createdOn` timestamp.\n"
        },
        "documentContent": {
          "type": "string",
          "description": "A valid XHTML document describing the consent. In this document, the following tokens can be inserted and they \nwill be substituted with the user's consent information when the consent is requested for that user:\n\n|Template variable|Substituted with|\n|---|---|\n|${studyName}|The name of the study|\n|${supportEmail}|The support email address for the study|\n|${technicalEmail}|The technical contact/support email address for the study|\n|${sponsorName}|The name of the sponsor for this study (the institution or research team name)|\n\nThe signature block will be appended to the end of your consent document. **It is not possible to remove or \nchange the signature block at this time.**\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "StudyConsent"
        }
      }
    },
    "StudyIdentifier": {
      "description": "A typesafe representation of a study's string identifier",
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string",
          "description": "The study's identifier (unique to the study)."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "StudyIdentifier"
        }
      }
    },
    "StudyParticipant": {
      "allOf": [
        {
          "$ref": "#/definitions/AbstractStudyParticipant"
        },
        {
          "description": "The full record about a study participant.\n"
        },
        {
          "properties": {
            "healthCode": {
              "type": "string",
              "readOnly": true,
              "description": "Only included in studies that have been configured to return the health code, and only to researchers\nthrough the researcher APIs.\n"
            },
            "email": {
              "type": "string",
              "description": "The user's email."
            },
            "consentHistories": {
              "type": "object",
              "readOnly": true,
              "description": "A complete historical record of all the user's consents and withdrawals of consent for all consent groups \nin the study.\n",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UserConsentHistory"
                }
              }
            },
            "type": {
              "type": "string",
              "readOnly": true,
              "description": "StudyParticipant"
            }
          }
        }
      ]
    },
    "Subpopulation": {
      "type": "object",
      "description": "A subpopulation in the Bridge server is a group of people who, for the purposes of the study, must agree to a specific \nconsent in order to participate in a study. (Some consents can be optional; these will not prevent participants from \nusing Bridge.) For example, a study may have one consent for all participants and a further, optional consent to \ncontribute genetic information. The user must sign the first consent, and may choose to sign the second consent; \nBridge will track the status of all this and refuse data from a participant who has not signed all required consents.\n\n* Users are assigned to one or more subpopulations on every request;\n* Bridge verifies that the user has signed all their required consents;\n* If they have, they are given access to the system. Their session will include detailed information about their consent status;\n* If the user's consent is not complete, Bridge returns a 412 response (Precondition Not Met). The JSON in that response will \n    include a [UserSessionInfo](#UserSessionInfo) object that contains a summary of the user's consent status.\n\n**Note:** filtering on Bridge is **opt-in**: if a request does not include information like a `User-Agent` \nheader, then all subpopulations may be assumed to apply to the caller.\n",
      "required": [
        "guid",
        "name",
        "criteria",
        "required",
        "defaultGroup",
        "version"
      ],
      "properties": {
        "guid": {
          "type": "string",
          "description": "A unique auto-generated identifier for the subpopulation. Usually a GUID (but not always). Cannot be \nchanged after creation. Used to retrieve the published consent for this subpopulation.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of this subpopulation."
        },
        "description": {
          "type": "string",
          "description": "The description of this subpopulation."
        },
        "criteria": {
          "$ref": "#/definitions/Criteria",
          "description": "Optional selection criteria that can be used to determine if a user should be assigned to this \nsubpopulation or not. If the user does not match a subpopulation, then that subpopulation and its \nrequirements are invisible to that user. Otherwise the user is in the subpopulation and all its \nconsent requirements apply.\n"
        },
        "required": {
          "type": "boolean",
          "description": "If true, participants must sign the consent associated with this subpopulation if they are identified \nas a member of this subpopulation. Users will receive a 412 response from Bridge if this condition is \nnot met.\n"
        },
        "defaultGroup": {
          "type": "boolean",
          "description": "If true, this is the default subpopulation created for a study, and it cannot be deleted (although it can be changed, \nand even made optional or hidden through the use of criteria).\n"
        },
        "publishedConsentCreatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The creation date (ISO 8601 timestamp) of the version of the consent agreement for this subpopulation that is \npublished, ie. that is presented to users for their signature. The subpopulation guid and this createdOn \ntimestamp can be used to retrieve the consent document.\n"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The optimistic locking version of the survey. This value must be submitted as \npart of the next update of the model. If it does not match the value on the server, \na 409 error (Conflict) will prevent the update from occurring.\n"
        },
        "consentHTML": {
          "type": "string",
          "description": "The URL to retrieve an HTML version of the published and active version of the consent. This can be \nreferenced in your mobile app, web site, etc. Publishing a new consent revision will update this document.\n"
        },
        "consentPDF": {
          "type": "string",
          "description": "The URL to retrieve a PDF version of the published and active version of the consent. This can be \nreferenced in your mobile app, web site, etc. Publishing a new consent revision will update this document.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Subpopulation"
        }
      }
    },
    "SubscriptionRequest": {
      "type": "object",
      "description": "",
      "required": [
        "topicGuids"
      ],
      "properties": {
        "topicGuids": {
          "type": "array",
          "description": "The topics to which the caller should be subscribed. If a topic is not in this list, and the \ncaller is currently subscribed to that topic, they will be unsubscribed from that topic.\n",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SubscriptionRequest"
        }
      }
    },
    "SubscriptionStatus": {
      "type": "object",
      "description": "A participant will receive one of these records for every topic in a study, indicating whether or not \nthe participant is subscribed to that topic. The list of topics can be used to show the user a UI to \nchange these subscriptions.\n",
      "required": [
        "topicGuid",
        "topicName",
        "subscribed"
      ],
      "properties": {
        "topicGuid": {
          "type": "string",
          "readOnly": true
        },
        "topicName": {
          "type": "string",
          "readOnly": true
        },
        "subscribed": {
          "type": "boolean",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SubscriptionStatus"
        }
      }
    },
    "Survey": {
      "type": "object",
      "description": "The definition of a survey.",
      "required": [
        "guid",
        "name",
        "identifier",
        "version",
        "elements"
      ],
      "properties": {
        "guid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of this survey. The name can be changed after creation, and should not \nappear in the UI.\n"
        },
        "identifier": {
          "type": "string",
          "description": "A private name for the survey, only visible to researchers, used to identify \nthe survey on export. It is recommended (but not required) that this identifier \nbe unique for this survey type within this study.\n"
        },
        "published": {
          "type": "boolean",
          "readOnly": true,
          "description": "True if this survey revision has been published, and is accessible to users through scheduling. \nMore than one version of a survey may be published; it is most common to return the most recently \npublished version to users.\n"
        },
        "schemaRevision": {
          "type": "integer",
          "format": "int64",
          "description": "The corresponding schema revision that Bridge server uses to export survey answers to Synapse.\n"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "The ISO 8601 date on which this version of this survey was created."
        },
        "modifiedOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time when this version of the survey was last modified."
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The version of this survey as used to implement optimistic locking. This must \nbe passed back to the server on an update, unmodified, in order for the update \nto succeed. If the survey has been concurrently modified, the update will throw \nan error.\n"
        },
        "elements": {
          "type": "array",
          "description": "An ordered collection of SurveyElement sub-types (in the order they will appear in \nthe survey).\n",
          "items": {
            "discriminator": "type",
            "$ref": "#/definitions/SurveyElement"
          }
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Survey"
        }
      }
    },
    "SurveyElement": {
      "type": "object",
      "description": "A survey element (either an info screen or a question).",
      "discriminator": "type",
      "required": [
        "guid",
        "identifier",
        "type"
      ],
      "properties": {
        "guid": {
          "type": "string",
          "description": "A unique GUID for this element of the survey"
        },
        "identifier": {
          "type": "string",
          "description": "A unique and easy-to-remember identifier, assigned by a researcher, that is maintained through \nlater versions of the survey.\n"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "SurveyInfoScreen": {
      "description": "A screen of a survey that presents information to the user: instructions, a thank you message, copyright notice, \nor anything similar. \n",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/SurveyElement"
        },
        {
          "required": [
            "title",
            "prompt",
            "type"
          ]
        },
        {
          "properties": {
            "title": {
              "type": "string",
              "description": "A title for this screen."
            },
            "prompt": {
              "type": "string",
              "description": "The main instructions or information text for the user"
            },
            "promptDetail": {
              "type": "string",
              "description": "Further information on the instructions, displayed in a secondary manner to \nthe prompt (smaller text, more button, etc.).\n"
            },
            "image": {
              "description": "An optional Image element describing an image to show for this screen.",
              "$ref": "#/definitions/Image"
            }
          }
        }
      ]
    },
    "SurveyQuestion": {
      "description": "A question in the survey.\n",
      "allOf": [
        {
          "$ref": "#/definitions/SurveyElement"
        },
        {
          "required": [
            "title",
            "prompt",
            "constraints",
            "uiHint"
          ]
        },
        {
          "properties": {
            "title": {
              "type": "string",
              "description": "A title for this question. Although this is required, it may or may not be used in the \ninterface. \n"
            },
            "prompt": {
              "type": "string",
              "description": "The question proper.\n"
            },
            "promptDetail": {
              "type": "string",
              "description": "Sub-question text that provides further instructions or clarifications on how to answer.\n"
            },
            "uiHint": {
              "$ref": "#/definitions/UIHint"
            },
            "constraints": {
              "$ref": "#/definitions/Constraints"
            }
          }
        }
      ]
    },
    "SurveyQuestionOption": {
      "description": "For questions with a list of enumerated answers, this object represents one of those answers.\n",
      "type": "object",
      "required": [
        "label"
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "The text to show in the UI (must be plain text)."
        },
        "detail": {
          "type": "string",
          "description": "Detail text shown in a de-emphasized way near the label in the UI (must be plain text).\n"
        },
        "value": {
          "type": "string",
          "description": "The value to submit when this option is selected. The value is always a string, but should \nbe convertible to the data type of the question's constraints. If no value is provided, than \nthe label should be sent as the answer to the surver.\n"
        },
        "image": {
          "$ref": "#/definitions/Image",
          "description": "An optional Image element describing an image to show for this option. It should be shown \nalong with the label (which will still be required).\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SurveyQuestionOption"
        }
      }
    },
    "SurveyReference": {
      "type": "object",
      "description": "A pointer to a survey defined for this study, and associated with a survey to be taken as part of the mobile application health study. If the `createdOn` value is null, then the reference is to the most recently published version of the survey (the specific version that should be used will be resolved when a [ScheduledActivity](#ScheduledActivity) is created for the participant).",
      "required": [
        "guid"
      ],
      "properties": {
        "identifier": {
          "type": "string",
          "description": "The survey identifier."
        },
        "guid": {
          "type": "string",
          "description": "The survey guid"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "The createdOn timestamp of the version of the survey. This can be null, which \nindicates the most recently published version of the study should be used.\n"
        },
        "href": {
          "type": "string",
          "readOnly": true,
          "description": "An URL to retrieve the survey."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SurveyReference"
        }
      }
    },
    "SurveyRule": {
      "description": "A constraint may have one or more rules in an array:\n* Rules should be evaluated after a user answers a question, against the answer provided by the user;\n* they should be evaluated until one matches (then further evaluation should be aborted);\n* if a rule matches, the action for that rule should be followed (e.g. showing a different question than the next question in the list, or ending the survey);\n* if a question allows multiple answers to be submitted, it matches the rule if any of the submitted answers match the rule;\n* if there are no rules or no rule matches, proceed to the next question in the list.\n\nEither `skipToTarget` or `endSurvey` should be supplied in the rule (but not both).\n",
      "type": "object",
      "required": [
        "operator",
        "value"
      ],
      "properties": {
        "operator": {
          "$ref": "#/definitions/Operator"
        },
        "value": {
          "type": "string",
          "description": "The value submitted by the user (as a string)."
        },
        "skipTo": {
          "type": "string",
          "description": "The property will reference an identifier for a question in the survey. The user's next \nquestion should be that question, and progress through the survey should proceed from \nthat question in the list. The target question should be after the current question in the \nsurvey.\n"
        },
        "endSurvey": {
          "type": "boolean",
          "description": "If the rule matches, immediately end the survey.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SurveyRule"
        }
      }
    },
    "TaskReference": {
      "type": "object",
      "description": "A pointer to a task identifier defined for this study, and associated with a task to be performed as part of the mobile application health study (e.g. a walking test).",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string",
          "description": "The identifier that defines a task on the client. Note that this value is conventional; \nit needs to be defined for a study but has no further meaning on the server. \n"
        },
        "schema": {
          "$ref": "#/definitions/SchemaReference"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "TaskReference"
        }
      }
    },
    "Upload": {
      "type": "object",
      "required": [
        "uploadId",
        "schemaId",
        "schemaRevision",
        "status",
        "requestedOn"
      ],
      "properties": {
        "uploadId": {
          "type": "string",
          "description": "The GUID assigned to this upoad."
        },
        "schemaId": {
          "type": "string",
          "description": "The ID of the schema for this upload."
        },
        "schemaRevision": {
          "type": "integer",
          "format": "int64",
          "description": "The revision for the schema of this upload."
        },
        "recordId": {
          "type": "string",
          "description": "The record ID of the upload in Synapse."
        },
        "contentLength": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the object in bytes. A standard HTTP header. For more information, \ngo to [http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13)\n"
        },
        "status": {
          "$ref": "#/definitions/UploadStatus"
        },
        "requestedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time (ISO 8601 format) that the client requested an URL to make an upload to the server.\n"
        },
        "completedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time (ISO 8601 format) that the upload was completed.\n"
        },
        "completedBy": {
          "type": "string",
          "description": "Currently the API has an endpoint for the client to call and mark an upload completed. \nHowever, there is also a process that detects uploads to S3 and marks the uploads \ncomplete. This field indicates which client completed the upload.\n",
          "enum": [
            "app",
            "s3_worker"
          ]
        },
        "validationMessageList": {
          "type": "array",
          "description": "An array of error messages if this upload did not pass validation.\n",
          "items": {
            "type": "string"
          }
        },
        "healthRecordExporterStatus": {
          "$ref": "#/definitions/SynapseExporterStatus"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Upload"
        }
      }
    },
    "UploadFieldDefinition": {
      "description": "Note: For legacy reasons, this is the only model object returned from the API that does not have \na type property reflecting the implementation structure of the JSON. Instead, the type attribute \nis of the type [UploadFieldType](#UploadFieldType).\n",
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Field name. A schema cannot contain fields with the same name."
        },
        "required": {
          "type": "boolean",
          "default": true,
          "description": "Whether this field is required."
        },
        "type": {
          "$ref": "#/definitions/UploadFieldType"
        },
        "allowOtherChoices": {
          "type": "boolean",
          "description": "Used for MULTI_CHOICE. True if the multi-choice field allows an \"other\" answer with user freeform text. This tells BridgeEX to reserve an \"other\" column for this field. Can be null, so that the number of field parameters doesn't explode.\n"
        },
        "fileExtension": {
          "type": "string",
          "description": "Used for ATTACHMENT_V2 types. Used as a hint by BridgeEX to preserve the file extension as a quality-of-life improvement. Includes the period. Examples: \".json\", \".csv\". Optional, defaults to \".tmp\".\n"
        },
        "mimeType": {
          "type": "string",
          "description": "Used for ATTACHMENT_V2 types. Used as a hint by BridgeEX to mark a Synapse file handle with the correct MIME type as a quality-of-life improvement. Optional, defaults to \"application/octet-stream\".\n"
        },
        "maxLength": {
          "type": "integer",
          "description": "Used for STRING, SINGLE_CHOICE, and INLINE_JSON_BLOB types. This is a hint for BridgeEX to create a Synapse column with the right width.\n\nIf not specified, Bridge will use the default max length of 100 (if applicable).\n"
        },
        "multiChoiceAnswerList": {
          "type": "array",
          "description": "Used for MULTI_CHOICE types. This lists all valid answers for this field. It is used by \nBridgeEX to create the Synapse table columns for MULTI_CHOICE fields. This is a list \nbecause order matters, in terms of Synapse column order. Must be specified if the field \ntype is a MULTI_CHOICE.\n\nFor schemas generated from surveys, this list will be the \"value\" in the survey question \noption, or the \"label\" if value is not specified.\n",
          "items": {
            "type": "string"
          }
        },
        "unboundedText": {
          "type": "boolean",
          "description": "True if this field is a text-field with unbounded length. (Only applies to fields that \nare serialized as text, such as INLINE_JSON_BLOB, SINGLE_CHOICE, or STRING. Can be \nnull, so that the number of field parameters doesn't explode. This flag takes \nprecedence over the maxLength value.\n"
        }
      }
    },
    "UploadRequest": {
      "description": "**Important: Headers of the same values must be used when doing the upload against the pre-signed URL.**\n",
      "type": "object",
      "required": [
        "name",
        "contentLength",
        "contentMd5",
        "contentType"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "File name"
        },
        "contentLength": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the object in bytes. A standard HTTP header. For more information, \ngo to [http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13)\n"
        },
        "contentMd5": {
          "type": "string",
          "description": "The base64-encoded, 128-bit MD5 digest of the object body."
        },
        "contentType": {
          "type": "string",
          "description": "A standard MIME type. \nFor more information, go to [http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17)\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "UploadRequest"
        }
      }
    },
    "UploadSchema": {
      "type": "object",
      "description": "Represents the expected fields and types for a data upload. This is used to validate incoming \nuploads and to export data to Synapse. See [Bridge Upload Data Format](/articles/study_design/upload_data_format.html) for more details about uploads.\n",
      "required": [
        "name",
        "revision",
        "schemaId",
        "version",
        "fieldDefinitions"
      ],
      "properties": {
        "maxAppVersions": {
          "type": "object",
          "description": "A map of operating system names to minimum app versions. The user must send a `User-Agent` header\nin a prescribed format, that declares the app version to be equal to or less than this\nversion number, in order to match.\n",
          "additionalProperties": {
            "type": "integer"
          }
        },
        "minAppVersions": {
          "type": "object",
          "description": "A map of operating system names to minimum app versions. The user must send a `User-Agent` header\nin a prescribed format, that declares the app version to be equal to or greater than this\nversion number, in order to match.\n",
          "additionalProperties": {
            "type": "integer"
          }
        },
        "name": {
          "type": "string",
          "description": "User-friendly schema name."
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Revision number of the schema, used to distinguish versions of the same data format.\nThis should be blank when creating a schema, and it should be passed back to the server \nwhen updating. If the schema revision cannot be updated in a backwards-compatible fashion, \nthe server will throw an exception. You will need to increment the revision number \nand create a new revision of the schema.\n"
        },
        "schemaId": {
          "type": "string",
          "description": "Unique identifier for the schema."
        },
        "surveyGuid": {
          "type": "string",
          "description": "If this schema is created from a survey, this is the GUID of the survey it represents.\n"
        },
        "studyId": {
          "type": "string",
          "description": "**Only available through worker APIs.** The identifier of the study from which this schema was retrieved.\n"
        },
        "surveyCreatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "If this schema is created from a survey, this is the createdOn timestamp \n(in ISO 8601 format) of the survey it represents.\n"
        },
        "schemaType": {
          "$ref": "#/definitions/UploadSchemaType"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The optimistic locking version of the survey. This value must be submitted as \npart of the next update of the model. If it does not match the value on the server, \na 409 error (Conflict) will prevent the update from occurring.\n"
        },
        "fieldDefinitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UploadFieldDefinition"
          }
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "UploadSchema"
        }
      }
    },
    "UploadSession": {
      "type": "object",
      "required": [
        "id",
        "url",
        "expires"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The upload ID. The client needs to use this ID to call Bridge when the upload is complete.\n"
        },
        "url": {
          "type": "string",
          "description": "A pre-signed URL for doing a PUT upload of the data. The URL will remain valid for 24 hours once created on the Bridge side.\n"
        },
        "expires": {
          "type": "string",
          "format": "date-time",
          "description": "The ISO 8601 date and time stamp at which this session will expire.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "UploadSession"
        }
      }
    },
    "UploadValidationStatus": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier for this upload."
        },
        "messageList": {
          "type": "array",
          "description": "An array of error messages if failures occurred during validation.\n",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "$ref": "#/definitions/UploadStatus"
        },
        "record": {
          "$ref": "#/definitions/HealthDataRecord"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "UploadValidationStatus"
        }
      }
    },
    "UserConsentHistory": {
      "description": "A record of a complete consent (including both the dates of consent and withdrawal, if applicable);\n",
      "readOnly": true,
      "type": "object",
      "properties": {
        "subpopulationGuid": {
          "type": "string",
          "description": "The consent group that the participant agreed to participate in."
        },
        "consentCreatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 date and time that the consent was created on."
        },
        "name": {
          "type": "string",
          "description": "Full name as entered by the participant."
        },
        "birthdate": {
          "type": "string",
          "format": "date",
          "description": "ISO 8601 date string (e.g. \"YYYY-MM-DD\")."
        },
        "imageData": {
          "type": "string",
          "format": "byte",
          "description": "The signature image in a base 64 encoding."
        },
        "imageMimeType": {
          "type": "string",
          "description": "The IANA mime type indicator for the image (e.g. \"image/png\")."
        },
        "signedOn": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 date and time that the consent was signed by the user."
        },
        "withdrewOn": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 date and time that the user withdrew the consent, if the user withdrew \nfrom the study (note that later consent records may re-enroll the user in the \nstudy; nothing prevents users from joining and quitting the study multiple times).\n"
        },
        "hasSignedActiveConsent": {
          "type": "boolean",
          "description": "True if the user signed the most recently published version of the consent, false otherwise.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "UserConsentHistory"
        }
      }
    },
    "UserProfile": {
      "type": "object",
      "description": "An early user information object that has been superceded by the [StudyParticipant](#StudyParticipant) object, along with a new set of API endpoints (`/v3/participants/self`).",
      "required": [
        "email",
        "username"
      ],
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string",
          "description": "Now always the same value as the user's email address"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "UserProfile"
        }
      }
    },
    "UserSessionInfo": {
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/AbstractStudyParticipant"
        },
        {
          "description": "Information about the user and their session.\n"
        },
        {
          "type": "object"
        },
        {
          "properties": {
            "authenticated": {
              "type": "boolean",
              "description": "Is the user currently authenticated?"
            },
            "sessionToken": {
              "type": "string",
              "description": "The session token that must be returned to the server to access services requiring authentication."
            },
            "environment": {
              "$ref": "#/definitions/Environment"
            },
            "email": {
              "type": "string",
              "description": "The user's email."
            },
            "dataSharing": {
              "type": "boolean",
              "description": "True if the sharing scope is anything other than \"no_sharing\"."
            },
            "signedMostRecentConsent": {
              "type": "boolean",
              "description": "True if all *required* consents have been signed and the versions signed are the most up-to-date versions of those consents."
            },
            "consented": {
              "type": "boolean",
              "description": "True if all required consents have been signed."
            },
            "consentStatuses": {
              "type": "object",
              "description": "A mapping from a subpopulation GUID to information about the participant's consent status \nin that subpopulation (whether consented or not). Only the subpopulations that currently apply \nto this user will have a ConsentStatus object in the map.\n",
              "additionalProperties": {
                "$ref": "#/definitions/ConsentStatus"
              }
            },
            "type": {
              "type": "string",
              "readOnly": true,
              "description": "UserSessionInfo"
            }
          }
        }
      ]
    },
    "VersionHolder": {
      "description": "An object that holds the version for a created or updated entity.\n",
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int64",
          "readOnly": true,
          "description": "The optimistic locking version of the entity."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "VersionHolder"
        }
      }
    },
    "Withdrawal": {
      "type": "object",
      "properties": {
        "reason": {
          "type": "string",
          "description": "An optional, free text description from the participant about why they are no longer participating in the study. Some applications provide a more structured form to the user, and convert this to a text response.\n\nThe reason will be emailed to the consent notification email address as part of the notification that this user has withdrawn from the study.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Withdrawal"
        }
      }
    },
    "AccountSummaryList": {
      "type": "object",
      "readOnly": true,
      "description": "Payload returning a list of [AccountSummary](/#AccountSummary) records.",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountSummary"
          }
        },
        "offsetBy": {
          "type": "integer",
          "format": "int64",
          "description": "The offsetBy value submitted to the server."
        },
        "pageSize": {
          "type": "integer",
          "description": "The page size submitted to the server."
        },
        "emailFilter": {
          "type": "string",
          "description": "The email filter submitted to the server"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "The start date filter applied to the createdOn timestamp of the account."
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "The end date filter applied to the createdOn timestamp of the account."
        },
        "total": {
          "type": "integer",
          "description": "The total number of records that match the criteria (may exceed page size)."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "PagedResourceList"
        }
      }
    },
    "ActivityList": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduledActivity"
          }
        },
        "offsetKey": {
          "type": "string",
          "description": "If present, the key that should be sent in the next request to page forward one page of records. If null, this is the final page of records"
        },
        "pageSize": {
          "type": "integer",
          "description": "The page size submitted to the server"
        },
        "total": {
          "type": "integer",
          "description": "The total number of records that match the criteria (may exceed page size)"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ResourceList"
        }
      }
    },
    "CompoundActivityDefinitionList": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompoundActivityDefinition"
          }
        },
        "total": {
          "type": "integer",
          "description": "The total number of records in the list"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ResourceList"
        }
      }
    },
    "ExternalIdentifierList": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalIdentifier"
          }
        },
        "pageSize": {
          "type": "integer"
        },
        "offsetKey": {
          "type": "string"
        },
        "idFilter": {
          "type": "string"
        },
        "offsetFilter": {
          "type": "string"
        },
        "total": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "PagedResourceList"
        }
      }
    },
    "NotificationRegistrationList": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationRegistration"
          }
        },
        "total": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ResourceList"
        }
      }
    },
    "NotificationTopicList": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationTopic"
          }
        },
        "total": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ResourceList"
        }
      }
    },
    "ReportDataList": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportData"
          }
        },
        "startDate": {
          "type": "string",
          "format": "date",
          "description": "The start date provided for filtering the content of this request."
        },
        "endDate": {
          "type": "string",
          "format": "date",
          "description": "The end date provided for filtering the content of this request."
        },
        "total": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "DateRangeResourceList"
        }
      }
    },
    "ReportIndexList": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportIndex"
          }
        },
        "reportType": {
          "$ref": "#/definitions/ReportType"
        },
        "total": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ReportTypeResourceList"
        }
      }
    },
    "ScheduleList": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Schedule"
          }
        },
        "total": {
          "type": "integer",
          "description": "The total number of records in the items list"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ResourceList"
        }
      }
    },
    "ScheduledActivityList": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduledActivity"
          }
        },
        "total": {
          "type": "integer",
          "description": "The total number of records in the items list"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ResourceList"
        }
      }
    },
    "ForwardCursorScheduledActivityList": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ScheduledActivity"
          }
        },
        "offsetBy": {
          "type": "string",
          "readOnly": true,
          "description": "A timestamp key for retrieving the next page of records."
        },
        "hasNext": {
          "type": "boolean",
          "readOnly": true,
          "description": "True if there is a further page of records, false otherwise"
        },
        "scheduledOnStart": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "Activities returned are at or after the timestamp. If scheduledOnStart is \nprovided, scheduledOnEnd must be provided, and vice versa. Default range is \n4 days in the future to 10 days in the past.\n"
        },
        "scheduledOnEnd": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "Activities returned are at or before the timestamp. If scheduledOnStart is \nprovided, scheduledOnEnd must be provided, and vice versa. Default range is \n4 days in the future to 10 days in the past.\n"
        },
        "pageSize": {
          "type": "integer",
          "readOnly": true,
          "description": "The page size submitted to the server"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ForwardCursorPagedResourceList"
        }
      }
    },
    "SchedulePlanList": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SchedulePlan"
          }
        },
        "total": {
          "type": "integer",
          "description": "The total number of records in the items list"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ResourceList"
        }
      }
    },
    "StringList": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "total": {
          "type": "integer",
          "description": "The total number of records in the items list"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ResourceList"
        }
      }
    },
    "StudyList": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Study"
          }
        },
        "total": {
          "type": "integer",
          "description": "The total number of records in the items list"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ResourceList"
        }
      }
    },
    "StudyConsentList": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StudyConsent"
          }
        },
        "total": {
          "type": "integer",
          "description": "The total number of records in the items list"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ResourceList"
        }
      }
    },
    "SubpopulationList": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subpopulation"
          }
        },
        "total": {
          "type": "integer",
          "description": "The total number of records in the items list."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ResourceList"
        }
      }
    },
    "SubscriptionStatusList": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionStatus"
          }
        },
        "total": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ResourceList"
        }
      }
    },
    "SurveyList": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Survey"
          }
        },
        "total": {
          "type": "integer",
          "description": "The total number of records in the items list"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ResourceList"
        }
      }
    },
    "UploadList": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Upload"
          }
        },
        "pageSize": {
          "type": "integer",
          "description": "maximum number of records in each returned page"
        },
        "offsetKey": {
          "type": "string",
          "description": "start key for next page"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "The startTime value submitted to the server"
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "The endTime value submitted to the server"
        },
        "total": {
          "type": "integer",
          "description": "The total number of records that match the criteria (may exceed page size)"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "PagedResourceList"
        }
      }
    },
    "UploadSchemaList": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UploadSchema"
          }
        },
        "total": {
          "type": "integer",
          "description": "The total number of records in the list"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ResourceList"
        }
      }
    },
    "Constraints": {
      "type": "object",
      "discriminator": "type",
      "required": [
        "type"
      ],
      "properties": {
        "rules": {
          "type": "array",
          "description": "Constraints can include one or more rules about how to progress through the elements of a \nsurvey (e.g. skipping some questions if they are not relevant to the participant, based on \nan answer to a question). See [Survey Rule](#SurveyRule) for more information.\n",
          "items": {
            "$ref": "#/definitions/SurveyRule"
          }
        },
        "dataType": {
          "$ref": "#/definitions/DataType"
        },
        "type": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "MultiValueConstraints": {
      "description": "A common question type where the participant is given a list of options to choose from. The \nUI representation of this question depends in part on whether the participant can select \nmultiple values, or add another value not included in the list:\n\n|uiHint|Description|\n|---|---|\n|checkbox, list|`allowMultiple` = true|\n|combobox|`allowMultiple` = false, `allowOther` = true|\n|radiobutton, select, slider|`allowMultiple` = false, `allowOther` = false|\n",
      "required": [
        "enumeration",
        "dataType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "allowOther": {
              "type": "boolean",
              "description": "True if the user should be able to enter another value besides those provided in the\nenumeration, false otherwise.\n"
            },
            "allowMultiple": {
              "type": "boolean",
              "description": "Can multiple values be returned as an answer? True if the client should submit multiple\nvalues, false otherwise.\n"
            },
            "enumeration": {
              "type": "array",
              "description": "The options presented for selection to the user.",
              "items": {
                "$ref": "#/definitions/SurveyQuestionOption"
              }
            }
          }
        }
      ]
    },
    "BooleanConstraints": {
      "description": "**UI hints:** checkbox, toggle.\n",
      "required": [
        "dataType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        }
      ]
    },
    "IntegerConstraints": {
      "description": "This type can be used to collect a number, or with a unit, it can be used to collect \na measure or a duration (e.g. \"3 hours\", or \"180 pounds\").\n\n**UI hints:** numberfield, slider.\n",
      "required": [
        "dataType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "unit": {
              "$ref": "#/definitions/Unit"
            },
            "minValue": {
              "type": "integer",
              "description": "Minimum valid value."
            },
            "maxValue": {
              "type": "integer",
              "description": "Maximum valid value."
            },
            "step": {
              "type": "integer",
              "default": 1,
              "description": "In increase or decrease in valid values, e.g. a step of 5 for a question that \nrecords weight to the nearest 5 pounds.\n"
            }
          }
        }
      ]
    },
    "DecimalConstraints": {
      "description": "A floating point value.\n\n**UI hints:** numberfield, slider.\n",
      "required": [
        "dataType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "unit": {
              "$ref": "#/definitions/Unit"
            },
            "minValue": {
              "type": "number",
              "description": "Minimum valid value."
            },
            "maxValue": {
              "type": "number",
              "description": "Maximum valid value."
            },
            "step": {
              "type": "number",
              "description": "In increase or decrease in valid values, e.g. a step of 0.1 for a question that records\nwater drunk in tenths of a liter.\n"
            }
          }
        }
      ]
    },
    "StringConstraints": {
      "description": "A string answer. \n\n**UI hints:** texfield, multilinetext.\n",
      "required": [
        "dataType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "minLength": {
              "type": "integer",
              "description": "The minimum number of characters that should be allowed."
            },
            "maxLength": {
              "type": "integer",
              "description": "The maximum number of characters that should be allowed."
            },
            "pattern": {
              "type": "string",
              "description": "A regular expression pattern (omitting slashes) against with the input \nshould be validated.\n"
            },
            "patternErrorMessage": {
              "type": "string",
              "description": "If a pattern is provided, an error message is required, explaining the desired format if the \ndata does not fit the pattern.\n"
            },
            "patternPlaceholder": {
              "type": "string",
              "description": "An example of the data to be entered, usually shown in or next to the input control \n(e.g. \"###-###-####\" for a US telephone number). This is not required, but it is desirable.\n"
            }
          }
        }
      ]
    },
    "DateTimeConstraints": {
      "description": "**UI hints:** datetimepicker.\n",
      "required": [
        "dataType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "allowFuture": {
              "type": "boolean",
              "default": false,
              "description": "Should this question allow answers in the future?"
            },
            "earliestValue": {
              "type": "string",
              "format": "date-time",
              "description": "ISO 8601 date and time value that is the earliest value that may be set for this question. \nIf allowFuture is false, that constraint should also be applied regardless of \nearliest/latestValue constraints.\n"
            },
            "latestValue": {
              "type": "string",
              "format": "date-time",
              "description": "ISO 8601 date and time value that is the earliest value that may be set for this question. \nIf allowFuture is false, that constraint should also be applied regardless of  \nearliest/latestValue constraints.\n"
            }
          }
        }
      ]
    },
    "DateConstraints": {
      "description": "A date without a time value (e.g. \"2016-07-28\").\n\n**UI hints:** datepicker.\n",
      "required": [
        "dataType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "allowFuture": {
              "type": "boolean",
              "default": false,
              "description": "Should this question allow answers in the future?"
            },
            "earliestValue": {
              "type": "string",
              "format": "date",
              "description": "ISO 8601 date value that is the earliest value that may be set for this question. \nIf allowFuture is false, that constraint should also be applied regardless of \nearliest/latestValue constraints.\n"
            },
            "latestValue": {
              "type": "string",
              "format": "date",
              "description": "ISO 8601 date value that is the earliest value that may be set for this question. \nIf allowFuture is false, that constraint should also be applied regardless of  \nearliest/latestValue constraints.\n"
            }
          }
        }
      ]
    },
    "TimeConstraints": {
      "description": "This is an ISO 8601 time value, in 24 hour time, milliseconds and seconds are optional, and there \nis no time zone for this value (e.g. 14:45:15.357). This represents a time of the day, regardless \nof where the user is, e.g. \"I take my medications at 3:00pm every day, whether I'm in Chicago or Tokyo.\"\n\n**UI hints:** timepicker.\n",
      "required": [
        "dataType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        }
      ]
    },
    "DurationConstraints": {
      "description": "Deprecated. Use an integer value with a unit of measure instead.\n\nDurations should be given as an integer value (not an ISO 8601 duration value). For the time being, a duration string is accepted if the duration is measured in the same time units required by the question. For example, if the question requires minutes, the duration string must be \"PT120M\", not \"PT2H\" or other equivalent values.\n\n**UI hints:** numberfield, slider.\n",
      "required": [
        "unit",
        "dataType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "unit": {
              "$ref": "#/definitions/Unit"
            },
            "minValue": {
              "type": "integer",
              "description": "Maximum valid value."
            },
            "maxValue": {
              "type": "integer",
              "description": "Minimum valid value."
            },
            "step": {
              "type": "integer",
              "default": 1,
              "description": "In increase or decrease in valid values, e.g. a step of 5 for a question that records weight \nto the nearest 5 pounds.\n"
            }
          }
        }
      ]
    }
  },
  "responses": {
    "400": {
      "description": "The submitted JSON payload has validation errors. It must be changed before it can be \nsucessfully re-submitted. Individual errors are provided in a map that is keyed to the \nJSON object structure. \n",
      "schema": {
        "$ref": "#/definitions/InvalidEntity"
      }
    },
    "401": {
      "description": "Authentication required (user not signed in).",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "410": {
      "description": "The version of the client making the request no longer has access to this service. The user \nmust update their app in order to continue using Bridge.\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "412": {
      "description": "User has signed in, but is not consented",
      "schema": {
        "$ref": "#/definitions/UserSessionInfo"
      }
    },
    "200_message": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "201_message": {
      "description": "Created",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "202_message": {
      "description": "Accepted",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_admin": {
      "description": "User cannot access this service because they are not an admin (no admin role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_admin_developer": {
      "description": "User cannot access this service because they are not a developer or admin (no developer or admin role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_developer": {
      "description": "User cannot access this service because they are not a developer (no developer role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_developer_researcher": {
      "description": "User cannot access this service because they are not a developer or researcher (no developer or researcher role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_developer_researcher_admin": {
      "description": "User cannot access this service because they do not have an administrative role (no developer, worker or admin role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_developer_worker": {
      "description": "User cannot access this service because they are not a developer or worker process \n(no developer or worker role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_researcher": {
      "description": "User cannot access this service because they are not a researcher (no researcher role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_worker": {
      "description": "User cannot access this service because they are not a worker process (no worker role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    }
  }
}
