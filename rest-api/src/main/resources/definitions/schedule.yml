description: |
    For more information about scheduling, see [Scheduling](/articles/study_design/scheduling.html).
type: object
required:
    - label
    - scheduleType
    - times
    - activities
    - persistent
properties:
    label:
        type: string
        description: A label to describe this schedule.
        x-nullable: false
    scheduleType:
        $ref: ./enums/schedule_type.yml
        x-nullable: false
    eventId:
        type: string
        description: |
            A comma-separated list of event IDs against which will be used for scheduling. If no eventId is provided, the event `enrollment` will be used. The system will use the first event ID (working left to right) for which the user has an event with a timestamp.
    delay:
        type: string
        description: |
            ISO 8601 duration string. An amount of time to wait before scheduling the first task. 
    interval:
        type: string
        description: |
            An ISO 8601 duration, describing the period in days between tasks (it can be days, weeks, months or even years, but should not be smaller than a day). If this is used, cronTrigger should not be used.
    sequencePeriod:
        type: string
        description: |
            A recurring schedule can specify a sequence in a crossover study design. The sequence starts from the triggering event, plus any delay, and continues until the end of the period. For example, if you have a recurring schedule that repeats daily, a `sequencePeriod` of 1 day (P1D) would generate one activity. If you set `sequencePeriod` to P2D, you will get two activities. Note that this is true regardless of whether or not there is a delay. Washout periods between sequences can be specified by delaying the execution of the next sequence.
    expires:
        type: string
        description: |
            ISO 8601 duration string. The period of time after which an unstarted, scheduled activity should be removed from the application (if it has not been started, no data will have been saved on the server). This is mandatory for recurring schedules so that unstarted activities do not stack up in the user's UI.
    cronTrigger:
        type: string
        description: |
            A cron expression will schedule recurring tasks according to this standard syntax for describing event schedules from the Unix operating system. The format of the cron expression is the seven field format as described in the documentation for the Java Quartz Scheduler (note that there are other formats that take up to eleven fields, this online cron expression generator creates expressions in the right format). If this is used, the interval and times are ignored.
    startsOn:
        type: string
        description: The scheduler will not create a task before this date and time.
        format: date-time
        example: '2020-08-28T14:28:13.386Z'
    endsOn:
        type: string
        description: |
            The scheduler will not create a task after this date and time. **Note that this takes precedence over the minimumPerSchedule setting that can be provided via the API. Tasks will not be "topped up" to this minimum if they extend outside of this time window.**
        format: date-time
        example: '2020-08-28T14:28:13.386Z'
    times:
        type: array
        description: |
            Required if an interval is specified (ignored if a cron expression is specified). An array of one or more ISO 8601 time values (without a date or time zone, e.g. "14:00"). One task will be created for each time on the day determined by the rest of the scheduler. If the schedule occurs once, only the first time will be used to schedule the task (and if no time is provided, the original time of the triggering event will be used; it's clearest to set a time).
        items:
            type: string
            description: |
                24hr time value(s) without a time zone (e.g. "14:30"). **Each time value will create a separate task, one for each activity in the schedule.**
        x-nullable: false
    persistent:
        type: boolean
        description: True if schedule type is persistent. (This is here for legacy reasons.)
        x-nullable: false
    activities:
        type: array
        description: |
            One or more activities that should be done by a participant on this schedule. Each activity will generate a separate task. See Activity.
        items:
            $ref: ./activity.yml
        x-nullable: false
    type:
        type: string
        readOnly: true
        description: "Schedule"
        x-nullable: false
    